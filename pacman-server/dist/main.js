/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./pacman-server/src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./pacman-server/src/index.js":
/*!************************************!*\
  !*** ./pacman-server/src/index.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pacnmanv2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pacnmanv2 */ \"./pacman-server/src/pacnmanv2.js\");\n/* harmony import */ var _pacman__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pacman */ \"./pacman-server/src/pacman.js\");\n \r\n\r\n \r\n\r\n\r\n$(() =>{\r\n    var socket = io();\r\n    socket.on('action', function (action) {\r\n        let direction = action.action;\r\n        let player = action.player\r\n        _pacnmanv2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].move(player,direction);\r\n        _pacman__WEBPACK_IMPORTED_MODULE_1__[\"default\"].move(player,direction);\r\n    });\r\n});\r\nsetTimeout( () =>{\r\n    _pacnmanv2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].startGameplayNoGhost(); \r\n    _pacman__WEBPACK_IMPORTED_MODULE_1__[\"default\"].startGameplayNoGhost(); \r\n}, 2000)\r\n\n\n//# sourceURL=webpack:///./pacman-server/src/index.js?");

/***/ }),

/***/ "./pacman-server/src/pacman.js":
/*!*************************************!*\
  !*** ./pacman-server/src/pacman.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*!\r\n * Copyright 2018\r\n * Google LLC\r\n * PAC-MAN TM & Â©BANDAI NAMCO Entertainment Inc.\r\n */\r\n\r\nwindow.google = {};\r\ngoogle.dom = {};\r\ngoogle.pacManSound = true;\r\ngoogle.browser = {};\r\ngoogle.browser.engine = {}\r\n\r\nconst spriteURL = 'https://storage.googleapis.com/tfjs-examples/assets/webcam-transfer-learning/pacman-sprite.png';\r\n\r\ngoogle.dom.remove = a => a && a.parentNode && a.parentNode.removeChild(a);\r\n\r\ngoogle.dom.append = a => document.body.appendChild(a);\r\n\r\nconst TRUE = true;\r\nconst FALSE = false;\r\nconst g = {};\r\nconst i = [1, 4, 2, 8];\r\nconst l = {\r\n  0: {\r\n    axis: 0,\r\n    increment: 0\r\n  },\r\n  1: {\r\n    axis: 0,\r\n    increment: -1\r\n  },\r\n  2: {\r\n    axis: 0,\r\n    increment: +1\r\n  },\r\n  4: {\r\n    axis: 1,\r\n    increment: -1\r\n  },\r\n  8: {\r\n    axis: 1,\r\n    increment: +1\r\n  }\r\n};\r\n\r\nconst m = [0, 7, 17, 32];\r\n\r\nconst n = [{\r\n  x: 5,\r\n  y: 1,\r\n  w: 56\r\n},\r\n{\r\n  x: 5,\r\n  y: 4,\r\n  w: 5\r\n},\r\n{\r\n  x: 5,\r\n  y: 1,\r\n  h: 4\r\n},\r\n{\r\n  x: 9,\r\n  y: 1,\r\n  h: 12\r\n},\r\n{\r\n  x: 5,\r\n  y: 12,\r\n  h: 4\r\n},\r\n{\r\n  x: 10,\r\n  y: 12,\r\n  h: 4\r\n},\r\n{\r\n  x: 5,\r\n  y: 15,\r\n  w: 16\r\n},\r\n{\r\n  x: 5,\r\n  y: 12,\r\n  w: 31\r\n},\r\n{\r\n  x: 60,\r\n  y: 1,\r\n  h: 4\r\n},\r\n{\r\n  x: 54,\r\n  y: 1,\r\n  h: 4\r\n},\r\n{\r\n  x: 19,\r\n  y: 1,\r\n  h: 12\r\n},\r\n{\r\n  x: 19,\r\n  y: 4,\r\n  w: 26\r\n},\r\n{\r\n  x: 13,\r\n  y: 5,\r\n  w: 7\r\n},\r\n{\r\n  x: 13,\r\n  y: 5,\r\n  h: 4\r\n},\r\n{\r\n  x: 13,\r\n  y: 8,\r\n  w: 3\r\n},\r\n{\r\n  x: 56,\r\n  y: 4,\r\n  h: 9\r\n},\r\n{\r\n  x: 48,\r\n  y: 4,\r\n  w: 13\r\n},\r\n{\r\n  x: 48,\r\n  y: 1,\r\n  h: 12\r\n},\r\n{\r\n  x: 60,\r\n  y: 12,\r\n  h: 4\r\n},\r\n{\r\n  x: 44,\r\n  y: 15,\r\n  w: 17\r\n},\r\n{\r\n  x: 54,\r\n  y: 12,\r\n  h: 4\r\n},\r\n{\r\n  x: 44,\r\n  y: 12,\r\n  w: 17\r\n},\r\n{\r\n  x: 44,\r\n  y: 1,\r\n  h: 15\r\n},\r\n{\r\n  x: 41,\r\n  y: 13,\r\n  w: 4\r\n},\r\n{\r\n  x: 41,\r\n  y: 13,\r\n  h: 3\r\n},\r\n{\r\n  x: 38,\r\n  y: 13,\r\n  h: 3\r\n},\r\n{\r\n  x: 38,\r\n  y: 15,\r\n  w: 4\r\n},\r\n{\r\n  x: 35,\r\n  y: 10,\r\n  w: 10\r\n},\r\n{\r\n  x: 35,\r\n  y: 1,\r\n  h: 15\r\n},\r\n{\r\n  x: 35,\r\n  y: 13,\r\n  w: 4\r\n},\r\n{\r\n  x: 21,\r\n  y: 12,\r\n  h: 4\r\n},\r\n{\r\n  x: 24,\r\n  y: 12,\r\n  h: 4\r\n},\r\n{\r\n  x: 24,\r\n  y: 15,\r\n  w: 12\r\n},\r\n{\r\n  x: 27,\r\n  y: 4,\r\n  h: 9\r\n},\r\n{\r\n  x: 52,\r\n  y: 9,\r\n  w: 5\r\n},\r\n{\r\n  x: 56,\r\n  y: 8,\r\n  w: 10,\r\n  type: 1\r\n},\r\n{\r\n  x: 1,\r\n  y: 8,\r\n  w: 9,\r\n  type: 1\r\n}];\r\n\r\nconst o = [{\r\n  x: 1,\r\n  y: 8,\r\n  w: 8\r\n},\r\n{\r\n  x: 57,\r\n  y: 8,\r\n  w: 9\r\n},\r\n{\r\n  x: 44,\r\n  y: 2,\r\n  h: 10\r\n},\r\n{\r\n  x: 35,\r\n  y: 5,\r\n  h: 7\r\n},\r\n{\r\n  x: 36,\r\n  y: 4,\r\n  w: 8\r\n},\r\n{\r\n  x: 36,\r\n  y: 10,\r\n  w: 8\r\n},\r\n{\r\n  x: 39,\r\n  y: 15,\r\n  w: 2\r\n}];\r\n\r\nconst p = [{\r\n  x: 5,\r\n  y: 15\r\n},\r\n{\r\n  x: 5,\r\n  y: 3\r\n},\r\n{\r\n  x: 15,\r\n  y: 8\r\n},\r\n{\r\n  x: 60,\r\n  y: 3\r\n},\r\n{\r\n  x: 60,\r\n  y: 15\r\n}];\r\n\r\nconst q = [{\r\n  x: 2,\r\n  y: 8\r\n},\r\n{\r\n  x: 63,\r\n  y: 8\r\n}];\r\n\r\nconst r = {\r\n  1: [{\r\n    x: 39.5,\r\n    y: 15,\r\n    dir: 4\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 4,\r\n    dir: 4,\r\n    scatterX: 57,\r\n    scatterY: -4\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 2,\r\n    scatterX: 0,\r\n    scatterY: -4\r\n  },\r\n  {\r\n    x: 37.625,\r\n    y: 7,\r\n    dir: 1,\r\n    scatterX: 57,\r\n    scatterY: 20\r\n  },\r\n  {\r\n    x: 41.375,\r\n    y: 7,\r\n    dir: 1,\r\n    scatterX: 0,\r\n    scatterY: 20\r\n  }],\r\n  2: [{\r\n    x: 40.25,\r\n    y: 15,\r\n    dir: 8\r\n  },\r\n  {\r\n    x: 38.75,\r\n    y: 15,\r\n    dir: 4\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 4,\r\n    dir: 4,\r\n    scatterX: 57,\r\n    scatterY: -4\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 2,\r\n    scatterX: 0,\r\n    scatterY: -4\r\n  },\r\n  {\r\n    x: 37.625,\r\n    y: 7,\r\n    dir: 1,\r\n    scatterX: 57,\r\n    scatterY: 20\r\n  },\r\n  {\r\n    x: 41.375,\r\n    y: 7,\r\n    dir: 1,\r\n    scatterX: 0,\r\n    scatterY: 20\r\n  }]\r\n};\r\n\r\nconst s = [32, 312];\r\nconst v = [80, 312];\r\n\r\nconst w = {\r\n  0: 0.16,\r\n  1: 0.23,\r\n  2: 1,\r\n  3: 1,\r\n  4: 2.23,\r\n  5: 0.3,\r\n  6: 1.9,\r\n  7: 2.23,\r\n  8: 1.9,\r\n  9: 5,\r\n  10: 1.9,\r\n  11: 1.18,\r\n  12: 0.3,\r\n  13: 0.5,\r\n  14: 1.9,\r\n  15: 9,\r\n  16: 10,\r\n  17: 0.26\r\n};\r\n\r\nconst y = 0.8 * 0.4;\r\n\r\nconst z = [{},\r\n{\r\n  ghostSpeed: 0.75,\r\n  ghostTunnelSpeed: 0.4,\r\n  playerSpeed: 0.8,\r\n  dotEatingSpeed: 0.71,\r\n  ghostFrightSpeed: 0.5,\r\n  playerFrightSpeed: 0.9,\r\n  dotEatingFrightSpeed: 0.79,\r\n  elroyDotsLeftPart1: 20,\r\n  elroySpeedPart1: 0.8,\r\n  elroyDotsLeftPart2: 10,\r\n  elroySpeedPart2: 0.85,\r\n  frightTime: 6,\r\n  frightBlinkCount: 5,\r\n  fruit: 1,\r\n  fruitScore: 100,\r\n  ghostModeSwitchTimes: [7, 20, 7, 20, 5, 20, 5, 1],\r\n  penForceTime: 4,\r\n  penLeavingLimits: [0, 0, 30, 60]\r\n},\r\n{\r\n  ghostSpeed: 0.85,\r\n  ghostTunnelSpeed: 0.45,\r\n  playerSpeed: 0.9,\r\n  dotEatingSpeed: 0.79,\r\n  ghostFrightSpeed: 0.55,\r\n  playerFrightSpeed: 0.95,\r\n  dotEatingFrightSpeed: 0.83,\r\n  elroyDotsLeftPart1: 30,\r\n  elroySpeedPart1: 0.9,\r\n  elroyDotsLeftPart2: 15,\r\n  elroySpeedPart2: 0.95,\r\n  frightTime: 5,\r\n  frightBlinkCount: 5,\r\n  fruit: 2,\r\n  fruitScore: 300,\r\n  ghostModeSwitchTimes: [7, 20, 7, 20, 5, 1033, 1 / 60, 1],\r\n  penForceTime: 4,\r\n  penLeavingLimits: [0, 0, 0, 50],\r\n  cutsceneId: 1\r\n},\r\n{\r\n  ghostSpeed: 0.85,\r\n  ghostTunnelSpeed: 0.45,\r\n  playerSpeed: 0.9,\r\n  dotEatingSpeed: 0.79,\r\n  ghostFrightSpeed: 0.55,\r\n  playerFrightSpeed: 0.95,\r\n  dotEatingFrightSpeed: 0.83,\r\n  elroyDotsLeftPart1: 40,\r\n  elroySpeedPart1: 0.9,\r\n  elroyDotsLeftPart2: 20,\r\n  elroySpeedPart2: 0.95,\r\n  frightTime: 4,\r\n  frightBlinkCount: 5,\r\n  fruit: 3,\r\n  fruitScore: 500,\r\n  ghostModeSwitchTimes: [7, 20, 7, 20, 5, 1033, 1 / 60, 1],\r\n  penForceTime: 4,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.85,\r\n  ghostTunnelSpeed: 0.45,\r\n  playerSpeed: 0.9,\r\n  dotEatingSpeed: 0.79,\r\n  ghostFrightSpeed: 0.55,\r\n  playerFrightSpeed: 0.95,\r\n  dotEatingFrightSpeed: 0.83,\r\n  elroyDotsLeftPart1: 40,\r\n  elroySpeedPart1: 0.9,\r\n  elroyDotsLeftPart2: 20,\r\n  elroySpeedPart2: 0.95,\r\n  frightTime: 3,\r\n  frightBlinkCount: 5,\r\n  fruit: 3,\r\n  fruitScore: 500,\r\n  ghostModeSwitchTimes: [7, 20, 7, 20, 5, 1033, 1 / 60, 1],\r\n  penForceTime: 4,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 40,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 20,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 2,\r\n  frightBlinkCount: 5,\r\n  fruit: 4,\r\n  fruitScore: 700,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0],\r\n  cutsceneId: 2\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 50,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 25,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 5,\r\n  frightBlinkCount: 5,\r\n  fruit: 4,\r\n  fruitScore: 700,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 50,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 25,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 2,\r\n  frightBlinkCount: 5,\r\n  fruit: 5,\r\n  fruitScore: 1E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 50,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 25,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 2,\r\n  frightBlinkCount: 5,\r\n  fruit: 5,\r\n  fruitScore: 1E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 60,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 30,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 1,\r\n  frightBlinkCount: 3,\r\n  fruit: 6,\r\n  fruitScore: 2E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0],\r\n  cutsceneId: 3\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 60,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 30,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 5,\r\n  frightBlinkCount: 5,\r\n  fruit: 6,\r\n  fruitScore: 2E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 60,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 30,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 2,\r\n  frightBlinkCount: 5,\r\n  fruit: 7,\r\n  fruitScore: 3E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 80,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 40,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 1,\r\n  frightBlinkCount: 3,\r\n  fruit: 7,\r\n  fruitScore: 3E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 80,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 40,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 1,\r\n  frightBlinkCount: 3,\r\n  fruit: 8,\r\n  fruitScore: 5E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0],\r\n  cutsceneId: 3\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 80,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 40,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 3,\r\n  frightBlinkCount: 5,\r\n  fruit: 8,\r\n  fruitScore: 5E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 100,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 50,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 1,\r\n  frightBlinkCount: 3,\r\n  fruit: 8,\r\n  fruitScore: 5E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 100,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 50,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 1,\r\n  frightBlinkCount: 3,\r\n  fruit: 8,\r\n  fruitScore: 5E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 100,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 50,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 0,\r\n  frightBlinkCount: 0,\r\n  fruit: 8,\r\n  fruitScore: 5E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0],\r\n  cutsceneId: 3\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 100,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 50,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 1,\r\n  frightBlinkCount: 3,\r\n  fruit: 8,\r\n  fruitScore: 5E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 120,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 60,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 0,\r\n  frightBlinkCount: 0,\r\n  fruit: 8,\r\n  fruitScore: 5E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 1,\r\n  dotEatingSpeed: 0.87,\r\n  ghostFrightSpeed: 0.6,\r\n  playerFrightSpeed: 1,\r\n  dotEatingFrightSpeed: 0.87,\r\n  elroyDotsLeftPart1: 120,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 60,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 0,\r\n  frightBlinkCount: 0,\r\n  fruit: 8,\r\n  fruitScore: 5E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n},\r\n{\r\n  ghostSpeed: 0.95,\r\n  ghostTunnelSpeed: 0.5,\r\n  playerSpeed: 0.9,\r\n  dotEatingSpeed: 0.79,\r\n  ghostFrightSpeed: 0.75,\r\n  playerFrightSpeed: 0.9,\r\n  dotEatingFrightSpeed: 0.79,\r\n  elroyDotsLeftPart1: 120,\r\n  elroySpeedPart1: 1,\r\n  elroyDotsLeftPart2: 60,\r\n  elroySpeedPart2: 1.05,\r\n  frightTime: 0,\r\n  frightBlinkCount: 0,\r\n  fruit: 8,\r\n  fruitScore: 5E3,\r\n  ghostModeSwitchTimes: [5, 20, 5, 20, 5, 1037, 1 / 60, 1],\r\n  penForceTime: 3,\r\n  penLeavingLimits: [0, 0, 0, 0]\r\n}];\r\n \r\nconst A = {\r\n  1: [{\r\n    x: 37.6,\r\n    y: 7,\r\n    dir: 1,\r\n    dest: 6.375,\r\n    speed: 0.48\r\n  },\r\n  {\r\n    x: 37.6,\r\n    y: 6.375,\r\n    dir: 2,\r\n    dest: 7.625,\r\n    speed: 0.48\r\n  },\r\n  {\r\n    x: 37.6,\r\n    y: 7.625,\r\n    dir: 1,\r\n    dest: 7,\r\n    speed: 0.48\r\n  }],\r\n  2: [{\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 2,\r\n    dest: 7.625,\r\n    speed: 0.48\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 7.625,\r\n    dir: 1,\r\n    dest: 6.375,\r\n    speed: 0.48\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 6.375,\r\n    dir: 2,\r\n    dest: 7,\r\n    speed: 0.48\r\n  }],\r\n  3: [{\r\n    x: 41.4,\r\n    y: 7,\r\n    dir: 1,\r\n    dest: 6.375,\r\n    speed: 0.48\r\n  },\r\n  {\r\n    x: 41.4,\r\n    y: 6.375,\r\n    dir: 2,\r\n    dest: 7.625,\r\n    speed: 0.48\r\n  },\r\n  {\r\n    x: 41.4,\r\n    y: 7.625,\r\n    dir: 1,\r\n    dest: 7,\r\n    speed: 0.48\r\n  }],\r\n  4: [{\r\n    x: 37.6,\r\n    y: 7,\r\n    dir: 8,\r\n    dest: 39.5,\r\n    speed: y\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 1,\r\n    dest: 4,\r\n    speed: y\r\n  }],\r\n  5: [{\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 1,\r\n    dest: 4,\r\n    speed: y\r\n  }],\r\n  6: [{\r\n    x: 41.4,\r\n    y: 7,\r\n    dir: 4,\r\n    dest: 39.5,\r\n    speed: y\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 1,\r\n    dest: 4,\r\n    speed: y\r\n  }],\r\n  7: [{\r\n    x: 39.5,\r\n    y: 4,\r\n    dir: 2,\r\n    dest: 7,\r\n    speed: 1.6\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 4,\r\n    dest: 37.625,\r\n    speed: 1.6\r\n  }],\r\n  8: [{\r\n    x: 39.5,\r\n    y: 4,\r\n    dir: 2,\r\n    dest: 7,\r\n    speed: 1.6\r\n  }],\r\n  9: [{\r\n    x: 39.5,\r\n    y: 4,\r\n    dir: 2,\r\n    dest: 7,\r\n    speed: 1.6\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 8,\r\n    dest: 41.375,\r\n    speed: 1.6\r\n  }],\r\n  10: [{\r\n    x: 37.6,\r\n    y: 7,\r\n    dir: 8,\r\n    dest: 39.5,\r\n    speed: y\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 1,\r\n    dest: 4,\r\n    speed: y\r\n  }],\r\n  11: [{\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 1,\r\n    dest: 4,\r\n    speed: y\r\n  }],\r\n  12: [{\r\n    x: 41.4,\r\n    y: 7,\r\n    dir: 4,\r\n    dest: 39.5,\r\n    speed: y\r\n  },\r\n  {\r\n    x: 39.5,\r\n    y: 7,\r\n    dir: 1,\r\n    dest: 4,\r\n    speed: y\r\n  }]\r\n};\r\n\r\nconst B = {\r\n  1: {\r\n    actors: [{\r\n      ghost: FALSE,\r\n      x: 64,\r\n      y: 9,\r\n      id: 0\r\n    },\r\n    {\r\n      ghost: TRUE,\r\n      x: 68.2,\r\n      y: 9,\r\n      id: 1\r\n    }],\r\n    sequence: [{\r\n      time: 5.5,\r\n      moves: [{\r\n        dir: 4,\r\n        speed: 0.75 * 0.8 * 2\r\n      },\r\n      {\r\n        dir: 4,\r\n        speed: 0.78 * 0.8 * 2\r\n      }]\r\n    },\r\n    {\r\n      time: 0.1,\r\n      moves: [{\r\n        dir: 4,\r\n        speed: 32\r\n      },\r\n      {\r\n        dir: 4,\r\n        speed: 0\r\n      }]\r\n    },\r\n    {\r\n      time: 9,\r\n      moves: [{\r\n        dir: 8,\r\n        speed: 0.75 * 0.8 * 2,\r\n        elId: \"pcm-bpcm\"\r\n      },\r\n      {\r\n        dir: 8,\r\n        speed: 0.8,\r\n        mode: 4\r\n      }]\r\n    }]\r\n  },\r\n  2: {\r\n    actors: [{\r\n      ghost: FALSE,\r\n      x: 64,\r\n      y: 9,\r\n      id: 0\r\n    },\r\n    {\r\n      ghost: TRUE,\r\n      x: 70.2,\r\n      y: 9,\r\n      id: 1\r\n    },\r\n    {\r\n      ghost: TRUE,\r\n      x: 32,\r\n      y: 9.5,\r\n      id: 2\r\n    }],\r\n    sequence: [{\r\n      time: 2.7,\r\n      moves: [{\r\n        dir: 4,\r\n        speed: 0.75 * 0.8 * 2\r\n      },\r\n      {\r\n        dir: 4,\r\n        speed: 0.78 * 0.8 * 2\r\n      },\r\n      {\r\n        dir: 0,\r\n        speed: 0,\r\n        elId: \"pcm-stck\"\r\n      }]\r\n    },\r\n    {\r\n      time: 1,\r\n      moves: [{\r\n        dir: 4,\r\n        speed: 0.75 * 0.8 * 2\r\n      },\r\n      {\r\n        dir: 4,\r\n        speed: 0.1 * 0.8\r\n      },\r\n      {\r\n        dir: 0,\r\n        speed: 0,\r\n        elId: \"pcm-stck\"\r\n      }]\r\n    },\r\n    {\r\n      time: 1.3,\r\n      moves: [{\r\n        dir: 4,\r\n        speed: 0.75 * 0.8 * 2\r\n      },\r\n      {\r\n        dir: 4,\r\n        speed: 0\r\n      },\r\n      {\r\n        dir: 0,\r\n        speed: 0,\r\n        elId: \"pcm-stck\"\r\n      }]\r\n    },\r\n    {\r\n      time: 1,\r\n      moves: [{\r\n        dir: 4,\r\n        speed: 0.75 * 0.8 * 2\r\n      },\r\n      {\r\n        dir: 4,\r\n        speed: 0,\r\n        elId: \"pcm-ghfa\"\r\n      },\r\n      {\r\n        dir: 0,\r\n        speed: 0,\r\n        elId: \"pcm-stck\"\r\n      }]\r\n    },\r\n    {\r\n      time: 2.5,\r\n      moves: [{\r\n        dir: 4,\r\n        speed: 0.75 * 0.8 * 2\r\n      },\r\n      {\r\n        dir: 4,\r\n        speed: 0,\r\n        elId: \"pcm-ghfa\"\r\n      },\r\n      {\r\n        dir: 0,\r\n        speed: 0,\r\n        elId: \"pcm-stck\"\r\n      }]\r\n    }]\r\n  },\r\n  3: {\r\n    actors: [{\r\n      ghost: FALSE,\r\n      x: 64,\r\n      y: 9,\r\n      id: 0\r\n    },\r\n    {\r\n      ghost: TRUE,\r\n      x: 70.2,\r\n      y: 9,\r\n      id: 2\r\n    }],\r\n    sequence: [{\r\n      time: 5.3,\r\n      moves: [{\r\n        dir: 4,\r\n        speed: 0.75 * 0.8 * 2\r\n      },\r\n      {\r\n        dir: 4,\r\n        speed: 0.78 * 0.8 * 2,\r\n        elId: \"pcm-ghin\"\r\n      }]\r\n    },\r\n    {\r\n      time: 5.3,\r\n      moves: [{\r\n        dir: 4,\r\n        speed: 0\r\n      },\r\n      {\r\n        dir: 8,\r\n        speed: 0.78 * 0.8 * 2,\r\n        elId: \"pcm-gbug\"\r\n      }]\r\n    }]\r\n  }\r\n};\r\n\r\nconst C = [90, 60, 45];\r\nconst D = C[0];\r\nlet GHOST_NUMBER = 0;\r\nlet googlePacman = (() => {\r\n\r\n\r\n\r\n\r\n  class Actor {\r\n    constructor(id) {\r\n      this.id = id\r\n    }\r\n\r\n    A() {\r\n      const b = r[g.playerCount][this.id];\r\n      this.pos = [b.y * 8, b.x * 8];\r\n      this.posDelta = [0, 0];\r\n      this.tilePos = [b.y * 8, b.x * 8];\r\n      this.targetPos = [b.scatterY * 8, b.scatterX * 8];\r\n      this.scatterPos = [b.scatterY * 8, b.scatterX * 8];\r\n      this.lastActiveDir = this.dir = b.dir;\r\n      this.physicalSpeed = this.requestedDir = this.nextDir = 0;\r\n      this.c(0);\r\n      this.reverseDirectionsNext = this.freeToLeavePen = this.modeChangedWhileInPen = this.eatenInThisFrightMode = FALSE;\r\n      this.l()\r\n    }\r\n\r\n    createElement() {\r\n      this.el = document.createElement(\"div\");\r\n      this.el.className = \"pcm-ac\";\r\n      this.el.id = `actor${this.id}`;\r\n      g.prepareElement(this.el, 0, 0);\r\n      g.playfieldEl.appendChild(this.el);\r\n      this.elPos = [0, 0];\r\n      this.elBackgroundPos = [0, 0]\r\n    }\r\n\r\n    a(b) {\r\n      const c = this.mode;\r\n      this.mode = b;\r\n      if (this.id == g.playerCount + 3 && (b == 16 || c == 16)) g.updateCruiseElroySpeed();\r\n      switch (c) {\r\n        case 32:\r\n          g.ghostExitingPenNow = FALSE;\r\n          break;\r\n        case 8:\r\n          g.ghostEyesCount > 0 && g.ghostEyesCount--;\r\n          g.ghostEyesCount == 0 && g.playAmbientSound();\r\n          break\r\n      }\r\n      switch (b) {\r\n        case 4:\r\n          this.fullSpeed = g.levels.ghostFrightSpeed * 0.8;\r\n          this.tunnelSpeed = g.levels.ghostTunnelSpeed * 0.8;\r\n          this.followingRoutine = FALSE;\r\n          break;\r\n        case 1:\r\n          this.fullSpeed = g.levels.ghostSpeed * 0.8;\r\n          this.tunnelSpeed = g.levels.ghostTunnelSpeed * 0.8;\r\n          this.followingRoutine =\r\n            FALSE;\r\n          break;\r\n        case 2:\r\n          this.targetPos = this.scatterPos;\r\n          this.fullSpeed = g.levels.ghostSpeed * 0.8;\r\n          this.tunnelSpeed = g.levels.ghostTunnelSpeed * 0.8;\r\n          this.followingRoutine = FALSE;\r\n          break;\r\n        case 8:\r\n          this.tunnelSpeed = this.fullSpeed = 1.6;\r\n          this.targetPos = [s[0], s[1]];\r\n          this.freeToLeavePen = this.followingRoutine = FALSE;\r\n          break;\r\n        case 16:\r\n          this.l();\r\n          this.followingRoutine = TRUE;\r\n          this.routineMoveId = -1;\r\n          switch (this.id) {\r\n            case g.playerCount + 1:\r\n              this.routineToFollow = 2;\r\n              break;\r\n            case g.playerCount + 2:\r\n              this.routineToFollow = 1;\r\n              break;\r\n            case g.playerCount + 3:\r\n              this.routineToFollow =\r\n                3;\r\n              break\r\n          }\r\n          break;\r\n        case 32:\r\n          this.followingRoutine = TRUE;\r\n          this.routineMoveId = -1;\r\n          switch (this.id) {\r\n            case g.playerCount + 1:\r\n              this.routineToFollow = 5;\r\n              break;\r\n            case g.playerCount + 2:\r\n              this.routineToFollow = 4;\r\n              break;\r\n            case g.playerCount + 3:\r\n              this.routineToFollow = 6;\r\n              break\r\n          }\r\n          g.ghostExitingPenNow = TRUE;\r\n          break;\r\n        case 64:\r\n          this.followingRoutine = TRUE;\r\n          this.routineMoveId = -1;\r\n          switch (this.id) {\r\n            case g.playerCount:\r\n            case g.playerCount + 1:\r\n              this.routineToFollow = 8;\r\n              break;\r\n            case g.playerCount + 2:\r\n              this.routineToFollow = 7;\r\n              break;\r\n            case g.playerCount + 3:\r\n              this.routineToFollow = 9;\r\n              break\r\n          }\r\n          break;\r\n        case 128:\r\n          this.followingRoutine = TRUE;\r\n          this.routineMoveId = -1;\r\n          switch (this.id) {\r\n            case g.playerCount:\r\n            case g.playerCount + 1:\r\n              this.routineToFollow = 11;\r\n              break;\r\n            case g.playerCount + 2:\r\n              this.routineToFollow = 10;\r\n              break;\r\n            case g.playerCount + 3:\r\n              this.routineToFollow = 12;\r\n              break\r\n          }\r\n          break\r\n      }\r\n      this.d()\r\n    }\r\n\r\n    l() {\r\n      if (this.id >= g.playerCount) this.targetPlayerId = Math.floor(g.rand() * g.playerCount)\r\n    }\r\n\r\n    z(b) {\r\n      if (!g.userDisabledSound) {\r\n        google.pacManSound = TRUE;\r\n        g.updateSoundIcon()\r\n      }\r\n      if (this.dir == g.oppositeDirections[b]) {\r\n        this.dir = b;\r\n        this.posDelta = [0, 0];\r\n        this.currentSpeed != 2 && this.c(0);\r\n        if (this.dir != 0) this.lastActiveDir = this.dir;\r\n        this.nextDir = 0\r\n      } else if (this.dir != b) if (this.dir == 0) {\r\n        if (g.playfield[this.pos[0]][this.pos[1]].allowedDir & b) this.dir = b\r\n      } else {\r\n        let c = g.playfield[this.tilePos[0]][this.tilePos[1]];\r\n        if (c && c.allowedDir & b) {\r\n          c = l[this.dir];\r\n          const d = [this.pos[0], this.pos[1]];\r\n          d[c.axis] -= c.increment;\r\n          let f = 0;\r\n          if (d[0] == this.tilePos[0] && d[1] == this.tilePos[1]) f = 1;\r\n          else {\r\n            d[c.axis] -= c.increment;\r\n            if (d[0] == this.tilePos[0] && d[1] == this.tilePos[1]) f = 2\r\n          }\r\n          if (f) {\r\n            this.dir = b;\r\n            this.pos[0] = this.tilePos[0];\r\n            this.pos[1] = this.tilePos[1];\r\n            c = l[this.dir];\r\n            this.pos[c.axis] += c.increment * f;\r\n            return\r\n          }\r\n        }\r\n        this.nextDir = b;\r\n        this.posDelta = [0, 0]\r\n      }\r\n    }\r\n\r\n    i(b) {\r\n      let c = this.tilePos;\r\n      let d = l[this.dir];\r\n      let f = [c[0], c[1]];\r\n      f[d.axis] += d.increment * 8;\r\n      let h = g.playfield[f[0]][f[1]];\r\n      if (b && !h.intersection) h = g.playfield[c[0]][c[1]];\r\n      if (h.intersection) switch (this.mode) {\r\n        case 2:\r\n        case 1:\r\n        case 8:\r\n          if ((this.dir & h.allowedDir) == 0 && h.allowedDir == g.oppositeDirections[this.dir]) this.nextDir = g.oppositeDirections[this.dir];\r\n          else {\r\n            b = 99999999999;\r\n            c = 0;\r\n            for (const j in i) {\r\n              const k = i[j];\r\n              if (h.allowedDir & k && this.dir != g.oppositeDirections[k]) {\r\n                d = l[k];\r\n                const x = [f[0], f[1]];\r\n                x[d.axis] += d.increment;\r\n                d = g.getDistance(x, [this.targetPos[0], this.targetPos[1]]);\r\n                if (d < b) {\r\n                  b = d;\r\n                  c = k\r\n                }\r\n              }\r\n            }\r\n            if (c) this.nextDir = c\r\n          }\r\n          break;\r\n        case 4:\r\n          if ((this.dir & h.allowedDir) == 0 && h.allowedDir == g.oppositeDirections[this.dir]) this.nextDir = g.oppositeDirections[this.dir];\r\n          else {\r\n            do f = i[Math.floor(g.rand() * 4)];\r\n            while ((f & h.allowedDir) == 0 || f == g.oppositeDirections[this.dir]);\r\n            this.nextDir = f\r\n          }\r\n          break\r\n      }\r\n    }\r\n\r\n    p(b) {\r\n      g.tilesChanged = TRUE;\r\n      if (this.reverseDirectionsNext) {\r\n        this.dir = g.oppositeDirections[this.dir];\r\n        this.nextDir = 0;\r\n        this.reverseDirectionsNext = FALSE;\r\n        this.i(TRUE)\r\n      }\r\n      if (!this.ghost && !g.playfield[b[0]][b[1]].path) {\r\n        this.pos[0] = this.lastGoodTilePos[0];\r\n        this.pos[1] = this.lastGoodTilePos[1];\r\n        b[0] = this.lastGoodTilePos[0];\r\n        b[1] = this.lastGoodTilePos[1];\r\n        this.dir = 0\r\n      } else this.lastGoodTilePos = [b[0], b[1]];\r\n      g.playfield[b[0]][b[1]].type == 1 && this.mode != 8 ? this.c(2) : this.c(0);\r\n      !this.ghost && g.playfield[b[0]][b[1]].dot && g.dotEaten(this.id, b);\r\n      this.tilePos[0] = b[0];\r\n      this.tilePos[1] = b[1]\r\n    }\r\n\r\n    t() {\r\n      let b = this.tilePos;\r\n      let c;\r\n      let d;\r\n      switch (this.dir) {\r\n        case 1:\r\n           c = [b[0], b[1]];\r\n           d = [b[0] + 3.6, b[1]];\r\n          break;\r\n        case 2:\r\n          c = [b[0] - 4, b[1]];\r\n          d = [b[0], b[1]];\r\n          break;\r\n        case 4:\r\n          c = [b[0], b[1]];\r\n          d = [b[0], b[1] + 3.6];\r\n          break;\r\n        case 8:\r\n          c = [b[0], b[1] - 4];\r\n          d = [b[0], b[1]];\r\n          break\r\n      }\r\n      if (this.pos[0] >= c[0] && this.pos[0] <= d[0] && this.pos[1] >= c[1] && this.pos[1] <= d[1]) {\r\n        b = l[this.nextDir];\r\n        this.posDelta[b.axis] += b.increment\r\n      }\r\n    }\r\n\r\n    n() {\r\n      if (this.pos[0] == q[0].y * 8 && this.pos[1] == q[0].x * 8) {\r\n        this.pos[0] = q[1].y * 8;\r\n        this.pos[1] = (q[1].x - 1) * 8\r\n      } else if (this.pos[0] == q[1].y * 8 && this.pos[1] == q[1].x * 8) {\r\n        this.pos[0] = q[0].y * 8;\r\n        this.pos[1] = (q[0].x + 1) * 8\r\n      }\r\n      this.mode == 8 && this.pos[0] == s[0] && this.pos[1] == s[1] && this.a(64);\r\n      if (!this.ghost && this.pos[0] == v[0] && (this.pos[1] == v[1] || this.pos[1] == v[1] + 8)) g.eatFruit(this.id)\r\n    }\r\n\r\n    u() {\r\n      this.n();\r\n      this.ghost && this.i(FALSE);\r\n      const b = g.playfield[this.pos[0]][this.pos[1]];\r\n      if (b.intersection) if (this.nextDir && this.nextDir & b.allowedDir) {\r\n        if (this.dir != 0) this.lastActiveDir = this.dir;\r\n        this.dir = this.nextDir;\r\n        this.nextDir = 0;\r\n        if (!this.ghost) {\r\n          this.pos[0] += this.posDelta[0];\r\n          this.pos[1] += this.posDelta[1];\r\n          this.posDelta = [0, 0]\r\n        }\r\n      } else if ((this.dir & b.allowedDir) == 0) {\r\n        if (this.dir != 0) this.lastActiveDir = this.dir;\r\n        this.nextDir = this.dir = 0;\r\n        this.c(0)\r\n      }\r\n    }\r\n\r\n    o() {\r\n      let b = this.pos[0] / 8;\r\n      const c = this.pos[1] / 8;\r\n      const d = [Math.round(b) * 8, Math.round(c) * 8];\r\n      if (d[0] != this.tilePos[0] || d[1] != this.tilePos[1]) this.p(d);\r\n      else {\r\n        b = [Math.floor(b) * 8, Math.floor(c) * 8];\r\n        this.pos[1] == b[1] && this.pos[0] == b[0] && this.u()\r\n      } !this.ghost && this.nextDir && g.playfield[d[0]][d[1]].intersection && this.nextDir & g.playfield[d[0]][d[1]].allowedDir && this.t()\r\n    }\r\n\r\n    B() {\r\n      if (this.id == g.playerCount && g.dotsRemaining < g.levels.elroyDotsLeftPart1 && this.mode == 2 && (!g.lostLifeOnThisLevel || g.actors[g.playerCount + 3].mode != 16)) {\r\n        var b = g.actors[this.targetPlayerId];\r\n        this.targetPos = [b.tilePos[0], b.tilePos[1]]\r\n      } else if (this.ghost && this.mode == 1) {\r\n        b = g.actors[this.targetPlayerId];\r\n        switch (this.id) {\r\n          case g.playerCount:\r\n            this.targetPos = [b.tilePos[0], b.tilePos[1]];\r\n            break;\r\n          case g.playerCount + 1:\r\n            this.targetPos = [b.tilePos[0], b.tilePos[1]];\r\n            let c = l[b.dir];\r\n            this.targetPos[c.axis] += 32 * c.increment;\r\n            if (b.dir == 1) this.targetPos[1] -= 32;\r\n            break;\r\n          case g.playerCount + 2:\r\n            const d = g.actors[g.playerCount];\r\n            const f = [b.tilePos[0], b.tilePos[1]];\r\n            c = l[b.dir];\r\n            f[c.axis] += 16 * c.increment;\r\n            if (b.dir == 1) f[1] -= 16;\r\n            this.targetPos[0] = f[0] * 2 - d.tilePos[0];\r\n            this.targetPos[1] = f[1] * 2 - d.tilePos[1];\r\n            break;\r\n          case g.playerCount + 3:\r\n            c = g.getDistance(b.tilePos, this.tilePos);\r\n            this.targetPos = c > 64 ? [b.tilePos[0], b.tilePos[1]] : this.scatterPos;\r\n            break\r\n        }\r\n      }\r\n    }\r\n\r\n    v() {\r\n      this.routineMoveId++;\r\n      if (this.routineMoveId == A[this.routineToFollow].length) if (this.mode == 16 && this.freeToLeavePen && !g.ghostExitingPenNow) {\r\n        this.eatenInThisFrightMode ? this.a(128) : this.a(32);\r\n        return\r\n      } else if (this.mode == 32 || this.mode == 128) {\r\n        this.pos = [s[0], s[1] + 4];\r\n        this.dir = this.modeChangedWhileInPen ? 8 : 4;\r\n        var b = g.mainGhostMode;\r\n        if (this.mode == 128 && b == 4) b = g.lastMainGhostMode;\r\n        this.a(b);\r\n        return\r\n      } else if (this.mode == 64) {\r\n        if (this.id == g.playerCount || this.freeToLeavePen) this.a(128);\r\n        else {\r\n          this.eatenInThisFrightMode =\r\n            TRUE;\r\n          this.a(16)\r\n        }\r\n        return\r\n      } else this.routineMoveId = 0;\r\n      b = A[this.routineToFollow][this.routineMoveId];\r\n      this.pos[0] = b.y * 8;\r\n      this.pos[1] = b.x * 8;\r\n      this.dir = b.dir;\r\n      this.physicalSpeed = 0;\r\n      this.speedIntervals = g.getSpeedIntervals(b.speed);\r\n      this.proceedToNextRoutineMove = FALSE;\r\n      this.b()\r\n    }\r\n\r\n    m() {\r\n      const b = A[this.routineToFollow][this.routineMoveId];\r\n      if (b) if (this.speedIntervals[g.intervalTime]) {\r\n        const c = l[this.dir];\r\n        this.pos[c.axis] += c.increment;\r\n        switch (this.dir) {\r\n          case 1:\r\n          case 4:\r\n            if (this.pos[c.axis] < b.dest * 8) {\r\n              this.pos[c.axis] = b.dest * 8;\r\n              this.proceedToNextRoutineMove = TRUE\r\n            }\r\n            break;\r\n          case 2:\r\n          case 8:\r\n            if (this.pos[c.axis] > b.dest * 8) {\r\n              this.pos[c.axis] = b.dest * 8;\r\n              this.proceedToNextRoutineMove = TRUE\r\n            }\r\n            break\r\n        }\r\n        this.b()\r\n      }\r\n    }\r\n\r\n    j() {\r\n      if (this.routineMoveId == -1 || this.proceedToNextRoutineMove) this.v();\r\n      this.m()\r\n    }\r\n\r\n    d() {\r\n      let b\r\n      switch (this.currentSpeed) {\r\n        case 0:\r\n          b = this.id == g.playerCount && (this.mode == 2 || this.mode == 1) ? g.cruiseElroySpeed : this.fullSpeed;\r\n          break;\r\n        case 1:\r\n          b = this.dotEatingSpeed;\r\n          break;\r\n        case 2:\r\n          b = this.tunnelSpeed;\r\n          break\r\n      }\r\n      if (this.physicalSpeed != b) {\r\n        this.physicalSpeed = b;\r\n        this.speedIntervals = g.getSpeedIntervals(this.physicalSpeed)\r\n      }\r\n    }\r\n\r\n    c(b) {\r\n      this.currentSpeed = b;\r\n      this.d()\r\n    }\r\n\r\n    e() {\r\n      if (this.dir) if (this.speedIntervals[g.intervalTime]) {\r\n        const b = l[this.dir];\r\n        this.pos[b.axis] += b.increment;\r\n        this.o();\r\n        this.b()\r\n      }\r\n    }\r\n\r\n    move() {\r\n      if (g.gameplayMode == 0 || this.ghost && g.gameplayMode == 1 && (this.mode == 8 || this.mode == 64)) {\r\n        if (this.requestedDir != 0) {\r\n          this.z(this.requestedDir);\r\n          this.requestedDir = 0\r\n        }\r\n        if (this.followingRoutine) {\r\n          this.j();\r\n          this.mode == 64 && this.j()\r\n        } else {\r\n          this.e();\r\n          this.mode == 8 && this.e()\r\n        }\r\n      }\r\n    }\r\n\r\n    k() {\r\n      const b = g.getPlayfieldX(this.pos[1] + this.posDelta[1]);\r\n      const c = g.getPlayfieldY(this.pos[0] + this.posDelta[0]);\r\n      if (this.elPos[0] != c || this.elPos[1] != b) {\r\n        this.elPos[0] = c;\r\n        this.elPos[1] = b;\r\n        this.el.style.left = `${b}px`;\r\n        this.el.style.top = `${c}px`\r\n      }\r\n    }\r\n\r\n    s() {\r\n      let b = 0;\r\n      let c = 0;\r\n      let d = this.dir;\r\n      if (d == 0) d = this.lastActiveDir;\r\n      if (g.gameplayMode == 1 && this.id == g.playerEatingGhostId) {\r\n        b = 3;\r\n        c = 0\r\n      } else if ((g.gameplayMode == 9 || g.gameplayMode == 10) && this.id == 0) {\r\n        b = 2;\r\n        c = 0\r\n      } else if (g.gameplayMode == 4 || g.gameplayMode == 5 || g.gameplayMode == 7) {\r\n        b = this.id == 0 ? 2 : 4;\r\n        c = 0\r\n      } else if (g.gameplayMode == 3) if (this.id == g.playerDyingId) {\r\n        d = 20 - Math.floor(g.gameplayModeTime / g.timing[4] * 21);\r\n        if (this.id == 0) {\r\n          b = d - 1;\r\n          switch (b) {\r\n            case -1:\r\n              b = 0;\r\n              break;\r\n            case 11:\r\n              b = 10;\r\n              break;\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n            case 15:\r\n            case 16:\r\n            case 17:\r\n            case 18:\r\n            case 19:\r\n            case 20:\r\n              b =\r\n                11;\r\n              break\r\n          }\r\n          c = 12\r\n        } else switch (d) {\r\n          case 0:\r\n          case 1:\r\n          case 2:\r\n          case 6:\r\n          case 10:\r\n            b = 4;\r\n            c = 3;\r\n            break;\r\n          case 3:\r\n          case 7:\r\n          case 11:\r\n            b = 4;\r\n            c = 0;\r\n            break;\r\n          case 4:\r\n          case 8:\r\n          case 12:\r\n          case 13:\r\n          case 14:\r\n          case 15:\r\n          case 16:\r\n          case 17:\r\n          case 18:\r\n          case 19:\r\n          case 20:\r\n            b = 4;\r\n            c = 2;\r\n            break;\r\n          case 5:\r\n          case 9:\r\n            b = 4;\r\n            c = 1;\r\n            break\r\n        }\r\n      } else {\r\n        b = 3;\r\n        c = 0\r\n      } else if (this.el.id == \"pcm-bpcm\") {\r\n        b = 14;\r\n        c = 0;\r\n        d = Math.floor(g.globalTime * 0.2) % 4;\r\n        if (d == 3) d = 1;\r\n        c += 2 * d\r\n      } else {\r\n        switch (d) {\r\n          case 4:\r\n            c = 0;\r\n            break;\r\n          case 8:\r\n            c = 1;\r\n            break;\r\n          case 1:\r\n            c = 2;\r\n            break;\r\n          case 2:\r\n            c = 3;\r\n            break\r\n        }\r\n        if (g.gameplayMode != 2) b = Math.floor(g.globalTime * 0.3) % 4;\r\n        if (b == 3 && this.dir == 0) b = 0;\r\n        if (b == 2 && this.id == 0) b = 0;\r\n        if (b == 3) {\r\n          b = 2;\r\n          if (this.id == 0) c = 0\r\n        }\r\n        if (this.id == 1) b += 4\r\n      }\r\n      return [c, b]\r\n    }\r\n\r\n    r() {\r\n      let b = 0;\r\n      let c = 0;\r\n      if (g.gameplayMode == 10 || g.gameplayMode == 4 || g.gameplayMode == 3) {\r\n        b = 3;\r\n        c = 0\r\n      } else if (g.gameplayMode == 1 && this.id == g.ghostBeingEatenId) {\r\n        switch (g.modeScoreMultiplier) {\r\n          case 2:\r\n            b = 0;\r\n            break;\r\n          case 4:\r\n            b = 1;\r\n            break;\r\n          case 8:\r\n            b = 2;\r\n            break;\r\n          case 16:\r\n            b = 3;\r\n            break\r\n        }\r\n        c = 11;\r\n        this.el.className = \"pcm-ac pcm-n\"\r\n      } else if (this.mode == 4 || (this.mode == 16 || this.mode == 32) && g.mainGhostMode == 4 && !this.eatenInThisFrightMode) {\r\n        b = 0;\r\n        c = 8;\r\n        if (g.frightModeTime < g.levels.frightTotalTime - g.levels.frightTime && Math.floor(g.frightModeTime / g.timing[1]) % 2 == 0) b += 2;\r\n        b += Math.floor(g.globalTime / 16) % 2\r\n      } else if (this.mode == 8 || this.mode == 64) {\r\n        c = this.nextDir;\r\n        if (!c) c = this.dir;\r\n        switch (c) {\r\n          case 4:\r\n            b = 2;\r\n            break;\r\n          case 8:\r\n            b = 3;\r\n            break;\r\n          case 1:\r\n            b = 0;\r\n            break;\r\n          case 2:\r\n            b = 1;\r\n            break\r\n        }\r\n        c = 10\r\n      } else if (this.el.id == \"pcm-ghin\") {\r\n        b = 6;\r\n        c = 8;\r\n        b += Math.floor(g.globalTime / 16) % 2\r\n      } else if (this.el.id == \"pcm-gbug\") {\r\n        b = 6;\r\n        c = 9;\r\n        c += Math.floor(g.globalTime / 16) % 2\r\n      } else if (this.el.id == \"pcm-ghfa\") {\r\n        b = g.cutsceneSequenceId == 3 ? 6 : 7;\r\n        c = 11\r\n      } else if (this.el.id == \"pcm-stck\") {\r\n        b = g.cutsceneSequenceId == 1 ? g.cutsceneTime > 60 ? 1 : g.cutsceneTime > 45 ? 2 : 3 : g.cutsceneSequenceId == 2 ? 3 : g.cutsceneSequenceId == 3 || g.cutsceneSequenceId == 4 ? 4 : 0;\r\n        c = 13\r\n      } else {\r\n        c = this.nextDir;\r\n        if (!c || g.playfield[this.tilePos[0]][this.tilePos[1]].type == 1) c = this.dir;\r\n        switch (c) {\r\n          case 4:\r\n            b = 4;\r\n            break;\r\n          case 8:\r\n            b = 6;\r\n            break;\r\n          case 1:\r\n            b = 0;\r\n            break;\r\n          case 2:\r\n            b = 2;\r\n            break\r\n        }\r\n        c = 4 + this.id - g.playerCount;\r\n        if (this.speed > 0 || g.gameplayMode != 13) b += Math.floor(g.globalTime / 16) % 2\r\n      }\r\n      return [c, b]\r\n    }\r\n\r\n    b() {\r\n      this.k();\r\n      let b = [0, 0];\r\n      b = g.gameplayMode == 8 || g.gameplayMode == 14 ? [0, 3] : this.ghost ? this.r() : this.s();\r\n      if (this.elBackgroundPos[0] != b[0] || this.elBackgroundPos[1] != b[1]) {\r\n        this.elBackgroundPos[0] = b[0];\r\n        this.elBackgroundPos[1] = b[1];\r\n        b[0] *= 16;\r\n        b[1] *= 16;\r\n        g.changeElementBkPos(this.el, b[1], b[0], TRUE)\r\n      }\r\n    }\r\n  }\r\n\r\n  g.rand = () => {\r\n    const b = 4294967296;\r\n    let c = 134775813;\r\n    c = c * g.randSeed + 1;\r\n    return (g.randSeed = c % b) / b\r\n  };\r\n  g.seed = b => {\r\n    g.randSeed = b\r\n  };\r\n  g.getDistance = (b, c) => Math.sqrt((c[1] - b[1]) * (c[1] - b[1]) + (c[0] - b[0]) * (c[0] - b[0]));\r\n  g.getPlayfieldX = b => b + -32;\r\n  g.getPlayfieldY = b => b + 0;\r\n  g.getCorrectedSpritePos = b => b / 8 * 10 + 2;\r\n  g.getDotElementId = (b, c) => `pcm-d${b}-${c}`;\r\n  g.showElementById = (b, c) => {\r\n    const d = document.getElementById(b);\r\n    if (d) d.style.visibility = c ? \"visible\" : \"hidden\"\r\n  };\r\n  g.getAbsoluteElPos = b => {\r\n    const c = [0, 0];\r\n    do {\r\n      c[0] += b.offsetTop;\r\n      c[1] += b.offsetLeft\r\n    } while (b = b.offsetParent);\r\n    return c\r\n  };\r\n  g.prepareElement = (b, c, d) => {\r\n    c = g.getCorrectedSpritePos(parseInt(c, 10));\r\n    d = g.getCorrectedSpritePos(parseInt(d, 10));\r\n    if (g.useCss) {\r\n      b.style.backgroundImage = `url(${spriteURL})`;\r\n      b.style.backgroundPosition = `${-c}px ${-d}px`;\r\n      b.style.backgroundRepeat = \"no-repeat\"\r\n    } else {\r\n      b.style.overflow = \"hidden\";\r\n      c = `display: block; position: relative; left: ${-c}px; top: ${-d}px`;\r\n      b.innerHTML = `<img style=\"${c}\" src=\"${spriteURL}\">`\r\n    }\r\n  };\r\n  g.changeElementBkPos = (b, c, d, f) => {\r\n    if (f) {\r\n      c = g.getCorrectedSpritePos(c);\r\n      d = g.getCorrectedSpritePos(d)\r\n    }\r\n    if (g.useCss) b.style.backgroundPosition = `${-c}px ${-d}px`;\r\n    else if (b.childNodes[0]) {\r\n      b.childNodes[0].style.left = `${-c}px`;\r\n      b.childNodes[0].style.top = `${-d}px`\r\n    }\r\n  };\r\n  g.determinePlayfieldDimensions = () => {\r\n    g.playfieldWidth = 0;\r\n    g.playfieldHeight = 0;\r\n    for (const b in n) {\r\n      let c = n[b];\r\n      if (c.w) {\r\n        c = c.x + c.w - 1;\r\n        if (c > g.playfieldWidth) g.playfieldWidth = c\r\n      } else {\r\n        c = c.y + c.h - 1;\r\n        if (c > g.playfieldHeight) g.playfieldHeight = c\r\n      }\r\n    }\r\n  };\r\n  g.preparePlayfield = () => {\r\n    g.playfield = [];\r\n    for (let b = 0; b <= g.playfieldHeight + 1; b++) {\r\n      g.playfield[b * 8] = [];\r\n      for (let c = -2; c <= g.playfieldWidth + 1; c++) g.playfield[b * 8][c * 8] = {\r\n        path: 0,\r\n        dot: 0,\r\n        intersection: 0\r\n      }\r\n    }\r\n  };\r\n  g.preparePaths = () => {\r\n    for (var b in n) {\r\n      const c = n[b];\r\n      const d = c.type;\r\n      if (c.w) {\r\n        for (var f = c.y * 8, h = c.x * 8; h <= (c.x + c.w - 1) * 8; h += 8) {\r\n          g.playfield[f][h].path = TRUE;\r\n          if (g.playfield[f][h].dot == 0) {\r\n            g.playfield[f][h].dot = 1;\r\n            g.dotsRemaining++\r\n          }\r\n          g.playfield[f][h].type = !d || h != c.x * 8 && h != (c.x + c.w - 1) * 8 ? d : 0\r\n        }\r\n        g.playfield[f][c.x * 8].intersection = TRUE;\r\n        g.playfield[f][(c.x + c.w - 1) * 8].intersection = TRUE\r\n      } else {\r\n        h = c.x * 8;\r\n        for (f = c.y * 8; f <= (c.y + c.h - 1) * 8; f += 8) {\r\n          if (g.playfield[f][h].path) g.playfield[f][h].intersection = TRUE;\r\n          g.playfield[f][h].path = TRUE;\r\n          if (g.playfield[f][h].dot == 0) {\r\n            g.playfield[f][h].dot = 1;\r\n            g.dotsRemaining++\r\n          }\r\n          g.playfield[f][h].type = !d || f != c.y * 8 && f != (c.y + c.h - 1) * 8 ? d : 0\r\n        }\r\n        g.playfield[c.y * 8][h].intersection = TRUE;\r\n        g.playfield[(c.y + c.h - 1) * 8][h].intersection = TRUE\r\n      }\r\n    }\r\n    for (b in o) if (o[b].w) for (h = o[b].x * 8; h <= (o[b].x + o[b].w - 1) * 8; h += 8) {\r\n      g.playfield[o[b].y * 8][h].dot = 0;\r\n      g.dotsRemaining--\r\n    } else for (f = o[b].y * 8; f <= (o[b].y + o[b].h - 1) * 8; f += 8) {\r\n      g.playfield[f][o[b].x * 8].dot = 0;\r\n      g.dotsRemaining--\r\n    }\r\n  };\r\n  g.prepareAllowedDirections = () => {\r\n    for (let b = 8; b <= g.playfieldHeight * 8; b += 8) for (let c = 8; c <= g.playfieldWidth * 8; c += 8) {\r\n      g.playfield[b][c].allowedDir = 0;\r\n      if (g.playfield[b - 8][c].path) g.playfield[b][c].allowedDir += 1;\r\n      if (g.playfield[b + 8][c].path) g.playfield[b][c].allowedDir += 2;\r\n      if (g.playfield[b][c - 8].path) g.playfield[b][c].allowedDir += 4;\r\n      if (g.playfield[b][c + 8].path) g.playfield[b][c].allowedDir += 8\r\n    }\r\n  };\r\n  g.createDotElements = () => {\r\n    for (let b = 8; b <= g.playfieldHeight * 8; b += 8) for (let c = 8; c <= g.playfieldWidth * 8; c += 8) if (g.playfield[b][c].dot) {\r\n      const d = document.createElement(\"div\");\r\n      d.className = \"pcm-d\";\r\n      d.id = g.getDotElementId(b, c);\r\n      d.style.left = `${c + -32}px`;\r\n      d.style.top = `${b + 0}px`;\r\n      g.playfieldEl.appendChild(d)\r\n    }\r\n  };\r\n  g.createEnergizerElements = () => {\r\n    for (const b in p) {\r\n      const c = p[b];\r\n      const d = g.getDotElementId(c.y * 8, c.x * 8);\r\n      document.getElementById(d).className = \"pcm-e\";\r\n      g.prepareElement(document.getElementById(d), 0, 144);\r\n      g.playfield[c.y * 8][c.x * 8].dot = 2\r\n    }\r\n  };\r\n  g.createFruitElement = () => {\r\n    g.fruitEl = document.createElement(\"div\");\r\n    g.fruitEl.id = \"pcm-f\";\r\n    g.fruitEl.style.left = `${g.getPlayfieldX(v[1])}px`;\r\n    g.fruitEl.style.top = `${g.getPlayfieldY(v[0])}px`;\r\n    g.prepareElement(g.fruitEl, -32, -16);\r\n    g.playfieldEl.appendChild(g.fruitEl)\r\n  };\r\n  g.createPlayfieldElements = () => {\r\n    g.doorEl = document.createElement(\"div\");\r\n    g.doorEl.id = \"pcm-do\";\r\n    g.doorEl.style.display = \"none\";\r\n    g.playfieldEl.appendChild(g.doorEl);\r\n    g.createDotElements();\r\n    g.createEnergizerElements();\r\n    g.createFruitElement()\r\n  };\r\n  g.createActors = () => {\r\n    g.actors = [];\r\n    for (let b = 0; b < g.playerCount; b++) {\r\n      g.actors[b] = new Actor(b);\r\n      if (b < g.playerCount) {\r\n        g.actors[b].ghost = FALSE;\r\n        g.actors[b].mode = 1\r\n      } else g.actors[b].ghost = TRUE\r\n    }\r\n    g.createGhost();\r\n  };\r\n  g.createGhost=()=>{\r\n    for (let index = 0; index < GHOST_NUMBER; index++){\r\n      let ghost = new Actor(index);\r\n      ghost.ghost = TRUE;\r\n      g.actors.push(ghost)\r\n\r\n    }\r\n  }\r\n  g.restartActors = () => {\r\n    for (const b in g.actors) g.actors[b].A()\r\n  };\r\n  g.createActorElements = () => {\r\n    for (const b in g.actors) g.actors[b].createElement()\r\n  };\r\n  g.createPlayfield = () => {\r\n    g.playfieldEl = document.createElement(\"div\");\r\n    g.playfieldEl.id = \"pcm-p\";\r\n    g.canvasEl.appendChild(g.playfieldEl)\r\n  };\r\n  g.resetPlayfield = () => {\r\n    g.dotsRemaining = 0;\r\n    g.dotsEaten = 0;\r\n    g.playfieldEl.innerHTML = \"\";\r\n    g.prepareElement(g.playfieldEl, 256, 0);\r\n    g.determinePlayfieldDimensions();\r\n    g.preparePlayfield();\r\n    g.preparePaths();\r\n    g.prepareAllowedDirections();\r\n    g.createPlayfieldElements();\r\n    g.createActorElements()\r\n  };\r\n  g.keyPressed = b => {\r\n    let c = FALSE;\r\n    switch (b) {\r\n      case 37:\r\n        g.actors[0].requestedDir = 4;\r\n        c = TRUE;\r\n        break;\r\n      case 38:\r\n        g.actors[0].requestedDir = 1;\r\n        c = TRUE;\r\n        break;\r\n      case 39:\r\n        g.actors[0].requestedDir = 8;\r\n        c = TRUE;\r\n        break;\r\n      case 40:\r\n        g.actors[0].requestedDir = 2;\r\n        c = TRUE;\r\n        break;\r\n      case 65:\r\n        if (g.playerCount == 2) {\r\n          g.actors[1].requestedDir = 4;\r\n          c = TRUE\r\n        }\r\n        break;\r\n      case 83:\r\n        if (g.playerCount == 2) {\r\n          g.actors[1].requestedDir = 2;\r\n          c = TRUE\r\n        }\r\n        break;\r\n      case 68:\r\n        if (g.playerCount == 2) {\r\n          g.actors[1].requestedDir = 8;\r\n          c = TRUE\r\n        }\r\n        break;\r\n      case 87:\r\n        if (g.playerCount == 2) {\r\n          g.actors[1].requestedDir = 1;\r\n          c = TRUE\r\n        }\r\n        break\r\n    }\r\n    return c\r\n  };\r\n  g.handleKeyDown = b => {\r\n    if (!b) b = window.event;\r\n    if (g.keyPressed(b.keyCode)) if (b.preventDefault) b.preventDefault();\r\n    else b.returnValue = FALSE\r\n  };\r\n  g.canvasClicked = (b, c) => {\r\n    let d = g.getAbsoluteElPos(g.canvasEl);\r\n    b -= d[1] - -32;\r\n    c -= d[0] - 0;\r\n    d = g.actors[0];\r\n    const f = g.getPlayfieldX(d.pos[1] + d.posDelta[1]) + 16;\r\n    const h = g.getPlayfieldY(d.pos[0] + d.posDelta[0]) + 32;\r\n    const j = Math.abs(b - f);\r\n    const k = Math.abs(c - h);\r\n    if (j > 8 && k < j) d.requestedDir = b > f ? 8 : 4;\r\n    else if (k > 8 && j < k) d.requestedDir = c > h ? 2 : 1\r\n  };\r\n  g.handleClick = b => {\r\n    if (!b) b = window.event;\r\n    g.canvasClicked(b.clientX, b.clientY)\r\n  };\r\n  g.registerTouch = () => {\r\n    document.body.addEventListener(\"touchstart\", g.handleTouchStart, TRUE);\r\n    g.canvasEl.addEventListener(\"touchstart\", g.handleTouchStart, TRUE);\r\n    document.f && document.f.q && document.f.q.addEventListener(\"touchstart\", g.handleTouchStart, TRUE)\r\n  };\r\n  g.handleTouchStart = b => {\r\n    g.touchDX = 0;\r\n    g.touchDY = 0;\r\n    if (b.touches.length == 1) {\r\n      g.touchStartX = b.touches[0].pageX;\r\n      g.touchStartY = b.touches[0].pageY;\r\n      document.body.addEventListener(\"touchmove\", g.handleTouchMove, TRUE);\r\n      document.body.addEventListener(\"touchend\", g.handleTouchEnd, TRUE)\r\n    }\r\n    b.preventDefault();\r\n    b.stopPropagation()\r\n  };\r\n  g.handleTouchMove = b => {\r\n    if (b.touches.length > 1) g.cancelTouch();\r\n    else {\r\n      g.touchDX = b.touches[0].pageX - g.touchStartX;\r\n      g.touchDY = b.touches[0].pageY - g.touchStartY\r\n    }\r\n    b.preventDefault();\r\n    b.stopPropagation()\r\n  };\r\n  g.handleTouchEnd = b => {\r\n    if (g.touchDX == 0 && g.touchDY == 0) g.canvasClicked(g.touchStartX, g.touchStartY);\r\n    else {\r\n      const c = Math.abs(g.touchDX);\r\n      const d = Math.abs(g.touchDY);\r\n      if (c < 8 && d < 8) g.canvasClicked(g.touchStartX, g.touchStartY);\r\n      else if (c > 15 && d < c * 2 / 3) g.actors[0].requestedDir = g.touchDX > 0 ? 8 : 4;\r\n      else if (d > 15 && c < d * 2 / 3) g.actors[0].requestedDir = g.touchDY > 0 ? 2 : 1\r\n    }\r\n    b.preventDefault();\r\n    b.stopPropagation();\r\n    g.cancelTouch()\r\n  };\r\n  g.cancelTouch = () => {\r\n    document.body.removeEventListener(\"touchmove\", g.handleTouchMove, TRUE);\r\n    document.body.removeEventListener(\"touchend\", g.handleTouchEnd, TRUE);\r\n    g.touchStartX = null;\r\n    g.touchStartY = null\r\n  };\r\n  g.addEventListeners = () => {\r\n    if (window.addEventListener) {\r\n      window.addEventListener(\"keydown\", g.handleKeyDown, FALSE);\r\n      g.canvasEl.addEventListener(\"click\", g.handleClick, FALSE);\r\n      g.registerTouch()\r\n    } else {\r\n      document.body.attachEvent(\"onkeydown\", g.handleKeyDown);\r\n      g.canvasEl.attachEvent(\"onclick\", g.handleClick)\r\n    }\r\n  };\r\n  g.startGameplay = () => {\r\n    g.score = [0, 0];\r\n    g.extraLifeAwarded = [FALSE, FALSE];\r\n    g.lives = 3;\r\n    g.level = 0;\r\n    g.paused = FALSE;\r\n    g.globalTime = 0;\r\n    g.newLevel(TRUE)\r\n  };\r\n  g.restartGameplay = b => {\r\n    g.seed(0);\r\n    g.frightModeTime = 0;\r\n    g.intervalTime = 0;\r\n    g.gameplayModeTime = 0;\r\n    g.fruitTime = 0;\r\n    g.ghostModeSwitchPos = 0;\r\n    g.ghostModeTime = g.levels.ghostModeSwitchTimes[0] * D;\r\n    g.ghostExitingPenNow = FALSE;\r\n    g.ghostEyesCount = 0;\r\n    g.tilesChanged = FALSE;\r\n    g.updateCruiseElroySpeed();\r\n    g.hideFruit();\r\n    g.resetForcePenLeaveTime();\r\n    g.restartActors();\r\n    g.updateActorPositions();\r\n    g.switchMainGhostMode(2, TRUE);\r\n    for (let c = g.playerCount + 1; c < g.playerCount + GHOST_NUMBER; c++) g.actors[c].a(16);\r\n    g.dotEatingChannel = [0, 0];\r\n    g.dotEatingSoundPart = [1, 1];\r\n    g.clearDotEatingNow();\r\n    b ? g.changeGameplayMode(4) : g.changeGameplayMode(6)\r\n  };\r\n  g.initiateDoubleMode = () => {\r\n    if (g.playerCount != 2) {\r\n      g.stopAllAudio();\r\n      g.changeGameplayMode(12)\r\n    }\r\n  };\r\n  g.newGame = () => {\r\n    g.playerCount = 1;\r\n    g.createChrome();\r\n    g.createPlayfield();\r\n    g.createActors();\r\n    // g.startGameplay()\r\n  };\r\n  g.switchToDoubleMode = () => {\r\n    g.playerCount = 2;\r\n    g.createChrome();\r\n    g.createPlayfield();\r\n    g.createActors();\r\n    g.startGameplay()\r\n  };\r\n  g.insertCoin = () => {\r\n    g.gameplayMode == 8 || g.gameplayMode == 14 ? g.newGame() : g.initiateDoubleMode()\r\n  };\r\n  g.createKillScreenElement = (b, c, d, f, h) => {\r\n    const j = document.createElement(\"div\");\r\n    j.style.left = `${b}px`;\r\n    j.style.top = `${c}px`;\r\n    j.style.width = `${d}px`;\r\n    j.style.height = `${f}px`;\r\n    j.style.zIndex = 119;\r\n    if (h) {\r\n      j.style.background = `url(${spriteURL}) -${g.killScreenTileX}px -${g.killScreenTileY}px no-repeat`;\r\n      g.killScreenTileY += 8\r\n    } else j.style.background = \"black\";\r\n    g.playfieldEl.appendChild(j)\r\n  };\r\n  g.killScreen = () => {\r\n    g.seed(0);\r\n    g.canvasEl.style.visibility = \"\";\r\n    g.createKillScreenElement(272, 0, 200, 80, FALSE);\r\n    g.createKillScreenElement(280, 80, 192, 56, FALSE);\r\n    g.killScreenTileX = 80;\r\n    g.killScreenTileY = 0;\r\n    for (let b = 280; b <= 472; b += 8) for (let c = 0; c <= 136; c += 8) {\r\n      if (g.rand() < 0.03) {\r\n        g.killScreenTileX = Math.floor(g.rand() * 25) * 10;\r\n        g.killScreenTileY = Math.floor(g.rand() * 2) * 10\r\n      }\r\n      g.createKillScreenElement(b, c, 8, 8, TRUE)\r\n    }\r\n    g.changeGameplayMode(14)\r\n  };\r\n  g.newLevel = b => {\r\n    g.level++;\r\n    g.levels = g.level >= z.length ? z[z.length - 1] : z[g.level];\r\n    // start issue 14: Ghosts stay blue permanently on restart\r\n    if ((g.levels.frightTime > 0) && (g.levels.frightTime <= 6))\r\n      g.levels.frightTime = Math.round(g.levels.frightTime * D);\r\n    // end issue 14\r\n    g.levels.frightTotalTime = g.levels.frightTime + g.timing[1] * (g.levels.frightBlinkCount * 2 - 1);\r\n    for (const c in g.actors) g.actors[c].dotCount = 0;\r\n    g.alternatePenLeavingScheme = FALSE;\r\n    g.lostLifeOnThisLevel = FALSE;\r\n    g.updateChrome();\r\n    g.resetPlayfield();\r\n    g.restartGameplay(b);\r\n    g.level == 256 && g.killScreen()\r\n  };\r\n  g.newLife = () => {\r\n    g.lostLifeOnThisLevel = TRUE;\r\n    g.alternatePenLeavingScheme = TRUE;\r\n    g.alternateDotCount = 0;\r\n    g.lives--;\r\n    g.updateChromeLives();\r\n    g.lives == -1 ? g.changeGameplayMode(8) : g.restartGameplay(FALSE)\r\n  };\r\n  g.switchMainGhostMode = (b, c) => {\r\n    if (b == 4 && g.levels.frightTime == 0) for (var d in g.actors) {\r\n      var f = g.actors[d];\r\n      if (f.ghost) f.reverseDirectionsNext = TRUE\r\n    } else {\r\n      f = g.mainGhostMode;\r\n      if (b == 4 && g.mainGhostMode != 4) g.lastMainGhostMode = g.mainGhostMode;\r\n      g.mainGhostMode = b;\r\n      if (b == 4 || f == 4) g.playAmbientSound();\r\n      switch (b) {\r\n        case 1:\r\n        case 2:\r\n          g.currentPlayerSpeed = g.levels.playerSpeed * 0.8;\r\n          g.currentDotEatingSpeed = g.levels.dotEatingSpeed * 0.8;\r\n          break;\r\n        case 4:\r\n          g.currentPlayerSpeed = g.levels.playerFrightSpeed * 0.8;\r\n          g.currentDotEatingSpeed = g.levels.dotEatingFrightSpeed * 0.8;\r\n          g.frightModeTime = g.levels.frightTotalTime;\r\n          g.modeScoreMultiplier = 1;\r\n          break\r\n      }\r\n      for (d in g.actors) {\r\n        f = g.actors[d];\r\n        if (f.ghost) {\r\n          if (b != 64 && !c) f.modeChangedWhileInPen = TRUE;\r\n          if (b == 4) f.eatenInThisFrightMode = FALSE;\r\n          if (f.mode != 8 && f.mode != 16 && f.mode != 32 && f.mode != 128 && f.mode != 64 || c) {\r\n            if (!c && f.mode != 4 && f.mode != b) f.reverseDirectionsNext = TRUE;\r\n            f.a(b)\r\n          }\r\n        } else {\r\n          f.fullSpeed = g.currentPlayerSpeed;\r\n          f.dotEatingSpeed = g.currentDotEatingSpeed;\r\n          f.tunnelSpeed = g.currentPlayerSpeed;\r\n          f.d()\r\n        }\r\n      }\r\n    }\r\n  };\r\n  g.figureOutPenLeaving = () => {\r\n    if (g.alternatePenLeavingScheme) {\r\n      g.alternateDotCount++;\r\n      switch (g.alternateDotCount) {\r\n        case m[1]:\r\n          g.actors[g.playerCount + 1].freeToLeavePen = TRUE;\r\n          break;\r\n        case m[2]:\r\n          g.actors[g.playerCount + 2].freeToLeavePen = TRUE;\r\n          break;\r\n        case m[3]:\r\n          if (g.actors[g.playerCount + 3].mode == 16) g.alternatePenLeavingScheme = FALSE;\r\n          break\r\n      }\r\n    } else if (g.actors[g.playerCount + 1].mode == 16 || g.actors[g.playerCount + 1].mode == 8) {\r\n      g.actors[g.playerCount + 1].dotCount++;\r\n      if (g.actors[g.playerCount + 1].dotCount >= g.levels.penLeavingLimits[1]) g.actors[g.playerCount + 1].freeToLeavePen = TRUE\r\n    } else if (g.actors[g.playerCount + 2].mode == 16 || g.actors[g.playerCount + 2].mode == 8) {\r\n      g.actors[g.playerCount + 2].dotCount++;\r\n      if (g.actors[g.playerCount + 2].dotCount >= g.levels.penLeavingLimits[2]) g.actors[g.playerCount + 2].freeToLeavePen = TRUE\r\n    } else if (g.actors[g.playerCount + 3].mode == 16 || g.actors[g.playerCount + 3].mode == 8) {\r\n      g.actors[g.playerCount + 3].dotCount++;\r\n      if (g.actors[g.playerCount + 3].dotCount >= g.levels.penLeavingLimits[3]) g.actors[g.playerCount + 3].freeToLeavePen = TRUE\r\n    }\r\n  };\r\n  g.resetForcePenLeaveTime = () => {\r\n    g.forcePenLeaveTime = g.levels.penForceTime * D\r\n  };\r\n  g.dotEaten = (b, c) => {\r\n    g.dotsRemaining--;\r\n    g.dotsEaten++;\r\n    g.actors[b].c(1);\r\n    g.playDotEatingSound(b);\r\n    if (g.playfield[c[0]][c[1]].dot == 2) {\r\n      g.switchMainGhostMode(4, FALSE);\r\n      g.addToScore(50, b)\r\n    } else g.addToScore(10, b);\r\n    const d = document.getElementById(g.getDotElementId(c[0], c[1]));\r\n    d.style.display = \"none\";\r\n    g.playfield[c[0]][c[1]].dot = 0;\r\n    g.updateCruiseElroySpeed();\r\n    g.resetForcePenLeaveTime();\r\n    //TODO\r\n    //g.figureOutPenLeaving();\r\n    if (g.dotsEaten == 70 || g.dotsEaten == 170) g.showFruit();\r\n    g.dotsRemaining == 0 && g.finishLevel();\r\n    g.playAmbientSound()\r\n  };\r\n  g.getFruitSprite = b => {\r\n    const c = b <= 4 ? 128 : 160;\r\n    b = 128 + 16 * ((b - 1) % 4);\r\n    return [c, b]\r\n  };\r\n  g.getFruitScoreSprite = b => {\r\n    const c = 128;\r\n    b = 16 * (b - 1);\r\n    return [c, b]\r\n  };\r\n  g.hideFruit = () => {\r\n    g.fruitShown = FALSE;\r\n    g.changeElementBkPos(g.fruitEl, 32, 16, TRUE)\r\n  };\r\n  g.showFruit = () => {\r\n    g.fruitShown = TRUE;\r\n    const b = g.getFruitSprite(g.levels.fruit);\r\n    g.changeElementBkPos(g.fruitEl, b[0], b[1], TRUE);\r\n    g.fruitTime = g.timing[15] + (g.timing[16] - g.timing[15]) * g.rand()\r\n  };\r\n  g.eatFruit = b => {\r\n    if (g.fruitShown) {\r\n      g.playSound(\"fruit\", 0);\r\n      g.fruitShown = FALSE;\r\n      const c = g.getFruitScoreSprite(g.levels.fruit);\r\n      g.changeElementBkPos(g.fruitEl, c[0], c[1], TRUE);\r\n      g.fruitTime = g.timing[14];\r\n      g.addToScore(g.levels.fruitScore, b)\r\n    }\r\n  };\r\n  g.updateActorTargetPositions = () => {\r\n    for (let b = g.playerCount; b < g.playerCount + GHOST_NUMBER; b++) g.actors[b].B()\r\n  };\r\n  g.moveActors = () => {\r\n    for (let b in g.actors) g.actors[b].move()\r\n  };\r\n  g.ghostDies = (b, c) => {\r\n    g.playSound(\"eating-ghost\", 0);\r\n    g.addToScore(200 * g.modeScoreMultiplier, c);\r\n    g.modeScoreMultiplier *= 2;\r\n    g.ghostBeingEatenId = b;\r\n    g.playerEatingGhostId = c;\r\n    g.changeGameplayMode(1)\r\n  };\r\n  g.playerDies = b => {\r\n    g.playerDyingId = b;\r\n    g.changeGameplayMode(2)\r\n  };\r\n  g.detectCollisions = () => {\r\n    g.tilesChanged = FALSE;\r\n    for (let b = g.playerCount; b < g.playerCount + GHOST_NUMBER; b++) for (let c = 0; c < g.playerCount; c++) if (g.actors[b].tilePos[0] == g.actors[c].tilePos[0] && g.actors[b].tilePos[1] == g.actors[c].tilePos[1]) if (g.actors[b].mode == 4) {\r\n      g.ghostDies(b, c);\r\n      return\r\n    } else g.actors[b].mode != 8 && g.actors[b].mode != 16 && g.actors[b].mode != 32 && g.actors[b].mode != 128 && g.actors[b].mode != 64 && g.playerDies(c)\r\n  };\r\n  g.updateCruiseElroySpeed = () => {\r\n    //TODO\r\n    /*\r\n    let b = g.levels.ghostSpeed * 0.8;\r\n    if (!g.lostLifeOnThisLevel || g.actors[g.playerCount + 3].mode != 16) {\r\n      const c = g.levels;\r\n      if (g.dotsRemaining < c.elroyDotsLeftPart2) b = c.elroySpeedPart2 * 0.8;\r\n      else if (g.dotsRemaining < c.elroyDotsLeftPart1) b = c.elroySpeedPart1 * 0.8\r\n    }\r\n    if (b != g.cruiseElroySpeed) {\r\n      g.cruiseElroySpeed = b;\r\n      g.actors[g.playerCount].d()\r\n    }\r\n    */\r\n  };\r\n  g.getSpeedIntervals = b => {\r\n    if (!g.speedIntervals[b]) {\r\n      let c = 0;\r\n      let d = 0;\r\n      g.speedIntervals[b] = [];\r\n      for (let f = 0; f < D; f++) {\r\n        c += b;\r\n        if (Math.floor(c) > d) {\r\n          g.speedIntervals[b].push(TRUE);\r\n          d = Math.floor(c)\r\n        } else g.speedIntervals[b].push(FALSE)\r\n      }\r\n    }\r\n    return g.speedIntervals[b]\r\n  };\r\n  g.finishLevel = () => {\r\n    g.changeGameplayMode(9)\r\n  };\r\n  g.changeGameplayMode = b => {\r\n    g.gameplayMode = b;\r\n    if (b != 13) for (let c = 0; c < g.playerCount + GHOST_NUMBER; c++) g.actors[c].b();\r\n    switch (b) {\r\n      case 0:\r\n        g.playAmbientSound();\r\n        break;\r\n      case 2:\r\n        g.stopAllAudio();\r\n        g.gameplayModeTime = g.timing[3];\r\n        break;\r\n      case 3:\r\n        g.playerDyingId == 0 ? g.playSound(\"death\", 0) : g.playSound(\"death-double\", 0);\r\n        g.gameplayModeTime = g.timing[4];\r\n        break;\r\n      case 6:\r\n        g.canvasEl.style.visibility = \"hidden\";\r\n        g.gameplayModeTime = g.timing[5];\r\n        break;\r\n      case 7:\r\n        g.stopAllAudio();\r\n        g.canvasEl.style.visibility = \"\";\r\n        g.doorEl.style.display = \"block\";\r\n        b = document.createElement(\"div\");\r\n        b.id = \"pcm-re\";\r\n        g.prepareElement(b, 160, 0);\r\n        g.playfieldEl.appendChild(b);\r\n        g.gameplayModeTime = g.timing[6];\r\n        break;\r\n      case 4:\r\n        g.doorEl.style.display = \"block\";\r\n        b = document.createElement(\"div\");\r\n        b.id = \"pcm-re\";\r\n        g.prepareElement(b, 160, 0);\r\n        g.playfieldEl.appendChild(b);\r\n        g.gameplayModeTime = g.timing[7];\r\n        g.stopAllAudio();\r\n        g.playerCount == 2 ? g.playSound(\"start-music-double\", 0, TRUE) : g.playSound(\"start-music\", 0, TRUE);\r\n        break;\r\n      case 5:\r\n        g.lives--;\r\n        g.updateChromeLives();\r\n        g.gameplayModeTime = g.timing[8];\r\n        break;\r\n      case 8:\r\n      case 14:\r\n        b = document.getElementById(\"pcm-re\");\r\n        google.dom.remove(b);\r\n        g.stopAllAudio();\r\n        b = document.createElement(\"div\");\r\n        b.id = \"pcm-go\";\r\n        g.prepareElement(b, 8, 152);\r\n        g.playfieldEl.appendChild(b);\r\n        g.gameplayModeTime = g.timing[9];\r\n        break;\r\n      case 9:\r\n        g.stopAllAudio();\r\n        g.gameplayModeTime = g.timing[10];\r\n        break;\r\n      case 10:\r\n        g.doorEl.style.display = \"none\";\r\n        g.gameplayModeTime = g.timing[11];\r\n        break;\r\n      case 11:\r\n        g.canvasEl.style.visibility = \"hidden\";\r\n        g.gameplayModeTime = g.timing[12];\r\n        break;\r\n      case 12:\r\n        g.playfieldEl.style.visibility = \"hidden\";\r\n        g.gameplayModeTime = g.timing[13];\r\n        break;\r\n      case 1:\r\n        g.gameplayModeTime =\r\n          g.timing[2];\r\n        break;\r\n      case 13:\r\n        g.startCutscene();\r\n        break\r\n    }\r\n  };\r\n  g.showChrome = b => {\r\n    g.showElementById(\"pcm-sc-1-l\", b);\r\n    g.showElementById(\"pcm-sc-2-l\", b);\r\n    g.showElementById(\"pcm-sc-1\", b);\r\n    g.showElementById(\"pcm-sc-2\", b);\r\n    g.showElementById(\"pcm-li\", b);\r\n    g.showElementById(\"pcm-so\", b)\r\n  };\r\n  g.toggleSound = b => {\r\n    b = window.event || b;\r\n    b.cancelBubble = TRUE;\r\n    if (google.pacManSound) {\r\n      g.userDisabledSound = TRUE;\r\n      g.stopAllAudio();\r\n      google.pacManSound = FALSE\r\n    } else {\r\n      google.pacManSound = TRUE;\r\n      g.playAmbientSound()\r\n    }\r\n    g.updateSoundIcon();\r\n    return b.returnValue = FALSE\r\n  };\r\n  g.updateSoundIcon = () => {\r\n    if (g.soundEl) google.pacManSound ? g.changeElementBkPos(g.soundEl, 216, 105, FALSE) : g.changeElementBkPos(g.soundEl, 236, 105, FALSE)\r\n  };\r\n  g.startCutscene = () => {\r\n    g.playfieldEl.style.visibility = \"hidden\";\r\n    g.canvasEl.style.visibility = \"\";\r\n    g.showChrome(FALSE);\r\n    g.cutsceneCanvasEl = document.createElement(\"div\");\r\n    g.cutsceneCanvasEl.id = \"pcm-cc\";\r\n    g.canvasEl.appendChild(g.cutsceneCanvasEl);\r\n    g.cutscene = B[g.cutsceneId];\r\n    g.cutsceneSequenceId = -1;\r\n    g.frightModeTime = g.levels.frightTotalTime;\r\n    g.cutsceneActors = [];\r\n    for (const b in g.cutscene.actors) {\r\n      let c = g.cutscene.actors[b].id;\r\n      if (c > 0) c += g.playerCount - 1;\r\n      const d = document.createElement(\"div\");\r\n      d.className = \"pcm-ac\";\r\n      d.id = `actor${c}`;\r\n      g.prepareElement(d, 0, 0);\r\n      c = new Actor(c);\r\n      c.el = d;\r\n      c.elBackgroundPos = [0, 0];\r\n      c.elPos = [0, 0];\r\n      c.pos = [g.cutscene.actors[b].y * 8, g.cutscene.actors[b].x * 8];\r\n      c.posDelta = [0, 0];\r\n      c.ghost = g.cutscene.actors[b].ghost;\r\n      g.cutsceneCanvasEl.appendChild(d);\r\n      g.cutsceneActors.push(c)\r\n    }\r\n    g.cutsceneNextSequence();\r\n    g.stopAllAudio();\r\n    g.playAmbientSound()\r\n  };\r\n  g.stopCutscene = () => {\r\n    g.playfieldEl.style.visibility = \"\";\r\n    google.dom.remove(g.cutsceneCanvasEl);\r\n    g.showChrome(TRUE);\r\n    g.newLevel(FALSE)\r\n  };\r\n  g.cutsceneNextSequence = () => {\r\n    g.cutsceneSequenceId++;\r\n    if (g.cutscene.sequence.length == g.cutsceneSequenceId) g.stopCutscene();\r\n    else {\r\n      const b = g.cutscene.sequence[g.cutsceneSequenceId];\r\n      g.cutsceneTime = b.time * D;\r\n      for (const c in g.cutsceneActors) {\r\n        const d = g.cutsceneActors[c];\r\n        d.dir = b.moves[c].dir;\r\n        d.speed = b.moves[c].speed;\r\n        if (b.moves[c].elId) d.el.id = b.moves[c].elId;\r\n        if (b.moves[c].mode) d.mode = b.moves[c].mode;\r\n        d.b()\r\n      }\r\n    }\r\n  };\r\n  g.checkCutscene = () => {\r\n    g.cutsceneTime <= 0 && g.cutsceneNextSequence()\r\n  };\r\n  g.advanceCutscene = () => {\r\n    for (const b in g.cutsceneActors) {\r\n      const c = g.cutsceneActors[b];\r\n      const d = l[c.dir];\r\n      c.pos[d.axis] += d.increment * c.speed;\r\n      c.b()\r\n    }\r\n    g.cutsceneTime--\r\n  };\r\n  g.updateActorPositions = () => {\r\n    for (const b in g.actors) g.actors[b].k()\r\n  };\r\n  g.blinkEnergizers = () => {\r\n    switch (g.gameplayMode) {\r\n      case 4:\r\n      case 5:\r\n      case 6:\r\n      case 7:\r\n      case 9:\r\n      case 10:\r\n      case 11:\r\n      case 12:\r\n        g.playfieldEl.className = \"\";\r\n        break;\r\n      case 8:\r\n      case 14:\r\n        g.playfieldEl.className = \"blk\";\r\n        break;\r\n      default:\r\n        if (g.globalTime % (g.timing[0] * 2) == 0) g.playfieldEl.className = \"\";\r\n        else if (g.globalTime % (g.timing[0] * 2) == g.timing[0]) g.playfieldEl.className = \"blk\";\r\n        break\r\n    }\r\n  };\r\n  g.blinkScoreLabels = () => {\r\n    if (g.gameplayMode != 13) {\r\n      let b = \"\";\r\n      if (g.globalTime % (g.timing[17] * 2) == 0) b = \"visible\";\r\n      else if (g.globalTime % (g.timing[17] * 2) == g.timing[17]) b = \"hidden\";\r\n      if (b) for (let c = 0; c < g.playerCount; c++) g.scoreLabelEl[c].style.visibility = b\r\n    }\r\n  };\r\n  g.finishFrightMode = () => {\r\n    g.switchMainGhostMode(g.lastMainGhostMode, FALSE)\r\n  };\r\n  g.handleGameplayModeTimer = () => {\r\n    if (g.gameplayModeTime) {\r\n      g.gameplayModeTime--;\r\n      switch (g.gameplayMode) {\r\n        case 2:\r\n        case 3:\r\n          for (var b = 0; b < g.playerCount + GHOST_NUMBER; b++) g.actors[b].b();\r\n          break;\r\n        case 10:\r\n          Math.floor(g.gameplayModeTime / (g.timing[11] / 8)) % 2 == 0 ? g.changeElementBkPos(g.playfieldEl, 322, 2, FALSE) : g.changeElementBkPos(g.playfieldEl, 322, 138, FALSE)\r\n      }\r\n      if (g.gameplayModeTime <= 0) {\r\n        g.gameplayModeTime = 0;\r\n        switch (g.gameplayMode) {\r\n          case 1:\r\n            g.changeGameplayMode(0);\r\n            g.ghostEyesCount++;\r\n            g.playAmbientSound();\r\n            g.actors[g.ghostBeingEatenId].el.className = \"pcm-ac\";\r\n            g.actors[g.ghostBeingEatenId].a(8);\r\n            let c = FALSE;\r\n            for (b = g.playerCount; b < g.playerCount + GHOST_NUMBER; b++) if (g.actors[b].mode == 4 || (g.actors[b].mode == 16 || g.actors[b].mode == 128) && !g.actors[b].eatenInThisFrightMode) {\r\n              c = TRUE;\r\n              break\r\n            }\r\n            c || g.finishFrightMode();\r\n            break;\r\n          case 2:\r\n            g.changeGameplayMode(3);\r\n            break;\r\n          case 3:\r\n            g.newLife();\r\n            break;\r\n          case 4:\r\n            g.changeGameplayMode(5);\r\n            break;\r\n          case 6:\r\n            g.changeGameplayMode(7);\r\n            break;\r\n          case 7:\r\n          case 5:\r\n            b = document.getElementById(\"pcm-re\");\r\n            google.dom.remove(b);\r\n            g.changeGameplayMode(0);\r\n            break;\r\n          case 8:\r\n            b = document.getElementById(\"pcm-go\");\r\n            google.dom.remove(b);\r\n            google.pacManQuery && google.pacManQuery();\r\n            break;\r\n          case 9:\r\n            g.changeGameplayMode(10);\r\n            break;\r\n          case 10:\r\n            g.changeGameplayMode(11);\r\n            break;\r\n          case 11:\r\n            if (g.levels.cutsceneId) {\r\n              g.cutsceneId = g.levels.cutsceneId;\r\n              g.changeGameplayMode(13)\r\n            } else {\r\n              g.canvasEl.style.visibility = \"\";\r\n              g.newLevel(FALSE)\r\n            }\r\n            break;\r\n          case 12:\r\n            g.playfieldEl.style.visibility = \"\";\r\n            g.canvasEl.style.visibility = \"\";\r\n            g.switchToDoubleMode();\r\n            break\r\n        }\r\n      }\r\n    }\r\n  };\r\n  g.handleFruitTimer = () => {\r\n    if (g.fruitTime) {\r\n      g.fruitTime--;\r\n      g.fruitTime <= 0 && g.hideFruit()\r\n    }\r\n  };\r\n  g.handleGhostModeTimer = () => {\r\n    if (g.frightModeTime) {\r\n      g.frightModeTime--;\r\n      if (g.frightModeTime <= 0) {\r\n        g.frightModeTime = 0;\r\n        g.finishFrightMode()\r\n      }\r\n    } else if (g.ghostModeTime > 0) {\r\n      g.ghostModeTime--;\r\n      if (g.ghostModeTime <= 0) {\r\n        g.ghostModeTime = 0;\r\n        g.ghostModeSwitchPos++;\r\n        if (g.levels.ghostModeSwitchTimes[g.ghostModeSwitchPos]) {\r\n          g.ghostModeTime = g.levels.ghostModeSwitchTimes[g.ghostModeSwitchPos] * D;\r\n          switch (g.mainGhostMode) {\r\n            case 2:\r\n              g.switchMainGhostMode(1, FALSE);\r\n              break;\r\n            case 1:\r\n              g.switchMainGhostMode(2, FALSE);\r\n              break\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  g.handleForcePenLeaveTimer = () => {\r\n    if (g.forcePenLeaveTime) {\r\n      g.forcePenLeaveTime--;\r\n      if (g.forcePenLeaveTime <= 0) {\r\n        for (let b = 1; b <= 3; b++) if (g.actors[g.playerCount + b].mode == 16) {\r\n          g.actors[g.playerCount + b].freeToLeavePen = TRUE;\r\n          break\r\n        }\r\n        g.resetForcePenLeaveTime()\r\n      }\r\n    }\r\n  };\r\n  g.handleTimers = () => {\r\n    if (g.gameplayMode == 0) {\r\n      g.handleForcePenLeaveTimer();\r\n      g.handleFruitTimer();\r\n      g.handleGhostModeTimer()\r\n    }\r\n    g.handleGameplayModeTimer()\r\n  };\r\n  //TODO\r\n   g.tick = () => {\r\n    let b = (new Date).getTime();\r\n    g.lastTimeDelta += b - g.lastTime - g.tickInterval;\r\n    if (g.lastTimeDelta > 100) g.lastTimeDelta = 100;\r\n    if (g.canDecreaseFps && g.lastTimeDelta > 50) {\r\n      g.lastTimeSlownessCount++;\r\n      g.lastTimeSlownessCount == 20 && g.decreaseFps()\r\n    }\r\n    let c = 0;\r\n    if (g.lastTimeDelta > g.tickInterval) {\r\n      c = Math.floor(g.lastTimeDelta / g.tickInterval);\r\n      g.lastTimeDelta -= g.tickInterval * c\r\n    }\r\n    g.lastTime = b;\r\n    if (g.gameplayMode == 13) {\r\n      for (b = 0; b < g.tickMultiplier + c; b++) {\r\n        g.advanceCutscene();\r\n        g.intervalTime = (g.intervalTime + 1) % D;\r\n        g.globalTime++\r\n      }\r\n      g.checkCutscene();\r\n      g.blinkScoreLabels()\r\n    } else for (b = 0; b < g.tickMultiplier + c; b++) {\r\n      g.moveActors();\r\n      if (g.gameplayMode == 0) if (g.tilesChanged) {\r\n        g.detectCollisions();\r\n        g.updateActorTargetPositions()\r\n      }\r\n      g.globalTime++;\r\n      g.intervalTime = (g.intervalTime + 1) % D;\r\n      g.blinkEnergizers();\r\n      g.blinkScoreLabels();\r\n      g.handleTimers()\r\n    }\r\n  }; \r\n  g.extraLife = b => {\r\n    g.playSound(\"extra-life\", 0);\r\n    g.extraLifeAwarded[b] = TRUE;\r\n    g.lives++;\r\n    if (g.lives > 5) g.lives = 5;\r\n    g.updateChromeLives()\r\n  };\r\n  g.addToScore = (b, c) => {\r\n    g.score[c] += b;\r\n    !g.extraLifeAwarded[c] && g.score[c] > 1E4 && g.extraLife(c);\r\n    g.updateChromeScore(c)\r\n  };\r\n  g.updateChrome = () => {\r\n    g.updateChromeLevel();\r\n    g.updateChromeLives();\r\n    for (let b = 0; b < g.playerCount; b++) g.updateChromeScore(b)\r\n  };\r\n  g.updateChromeScore = b => {\r\n    let c = g.score[b].toString();\r\n    if (c.length > g.scoreDigits) c = c.substr(c.length - g.scoreDigits, g.scoreDigits);\r\n    for (let d = 0; d < g.scoreDigits; d++) {\r\n      const f = document.getElementById(`pcm-sc-${b + 1}-${d}`);\r\n      const h = c.substr(d, 1);\r\n      h ? g.changeElementBkPos(f, 8 + 8 * parseInt(h, 10), 144, TRUE) : g.changeElementBkPos(f, 48, 0, TRUE)\r\n    }\r\n  };\r\n  g.updateChromeLives = () => {\r\n    g.livesEl.innerHTML = \"\";\r\n    for (let b = 0; b < g.lives; b++) {\r\n      const c = document.createElement(\"div\");\r\n      c.className = \"pcm-lif\";\r\n      g.prepareElement(c, 64, 129);\r\n      g.livesEl.appendChild(c)\r\n    }\r\n  };\r\n  g.updateChromeLevel = () => {\r\n    g.levelEl.innerHTML = \"\";\r\n    for (let b = g.level; b >= Math.max(g.level - 4 + 1, 1); b--) {\r\n      let c = b >= z.length ? z[z.length - 1].fruit : z[b].fruit;\r\n      const d = document.createElement(\"div\");\r\n      c = g.getFruitSprite(c);\r\n      g.prepareElement(d, c[0], c[1]);\r\n      g.levelEl.appendChild(d)\r\n    }\r\n    g.levelEl.style.marginTop = `${(4 - Math.min(g.level, 4)) * 16}px`\r\n  };\r\n  g.createChrome = () => {\r\n    g.canvasEl.innerHTML = \"\";\r\n    g.scoreDigits = g.playerCount == 1 ? 10 : 5;\r\n    g.scoreLabelEl = [];\r\n    g.scoreLabelEl[0] = document.createElement(\"div\");\r\n    g.scoreLabelEl[0].id = \"pcm-sc-1-l\";\r\n    g.prepareElement(g.scoreLabelEl[0], 160, 56);\r\n    g.canvasEl.appendChild(g.scoreLabelEl[0]);\r\n    g.scoreEl = [];\r\n    g.scoreEl[0] = document.createElement(\"div\");\r\n    g.scoreEl[0].id = \"pcm-sc-1\";\r\n    for (var b = 0; b < g.scoreDigits; b++) {\r\n      var c = document.createElement(\"div\");\r\n      c.id = `pcm-sc-1-${b}`;\r\n      c.style.top = `${b * 8}px`;\r\n      c.style.left = 0;\r\n      c.style.position = \"absolute\";\r\n      c.style.width = \"8px\";\r\n      c.style.height = \"8px\";\r\n      g.prepareElement(c, 48, 0);\r\n      g.scoreEl[0].appendChild(c)\r\n    }\r\n    g.canvasEl.appendChild(g.scoreEl[0]);\r\n    g.livesEl = document.createElement(\"div\");\r\n    g.livesEl.id = \"pcm-li\";\r\n    g.canvasEl.appendChild(g.livesEl);\r\n    g.levelEl = document.createElement(\"div\");\r\n    g.levelEl.id = \"pcm-le\";\r\n    g.canvasEl.appendChild(g.levelEl);\r\n    if (g.playerCount == 2) {\r\n      g.scoreLabelEl[1] = document.createElement(\"div\");\r\n      g.scoreLabelEl[1].id = \"pcm-sc-2-l\";\r\n      g.prepareElement(g.scoreLabelEl[1], 160, 64);\r\n      g.canvasEl.appendChild(g.scoreLabelEl[1]);\r\n      g.scoreEl[1] = document.createElement(\"div\");\r\n      g.scoreEl[1].id = \"pcm-sc-2\";\r\n      for (b = 0; b < g.scoreDigits; b++) {\r\n        c = document.createElement(\"div\");\r\n        c.id = `pcm-sc-2-${b}`;\r\n        c.style.top = `${b * 8}px`;\r\n        c.style.left = 0;\r\n        c.style.position = \"absolute\";\r\n        c.style.width = \"8px\";\r\n        c.style.height = \"8px\";\r\n        g.prepareElement(c, 48, 0);\r\n        g.scoreEl[1].appendChild(c)\r\n      }\r\n      g.canvasEl.appendChild(g.scoreEl[1])\r\n    }\r\n    if (g.soundAvailable) {\r\n      g.soundEl = document.createElement(\"div\");\r\n      g.soundEl.id = \"pcm-so\";\r\n      g.prepareElement(g.soundEl, -32, -16);\r\n      g.canvasEl.appendChild(g.soundEl);\r\n      g.soundEl.onclick =\r\n        g.toggleSound;\r\n      g.updateSoundIcon()\r\n    }\r\n  };\r\n  g.clearDotEatingNow = () => {\r\n    g.dotEatingNow = [FALSE, FALSE];\r\n    g.dotEatingNext = [FALSE, FALSE]\r\n  };\r\n  g.playSound = (b, c, d) => {\r\n    if (!(!g.soundAvailable || !google.pacManSound || g.paused)) {\r\n      d || g.stopSoundChannel(c);\r\n      try {\r\n        g.flashSoundPlayer.playTrack(b, c)\r\n      } catch (f) {\r\n        g.soundAvailable = FALSE\r\n      }\r\n    }\r\n  };\r\n  g.stopSoundChannel = b => {\r\n    if (g.soundAvailable) try {\r\n      g.flashSoundPlayer.stopChannel(b)\r\n    } catch (c) {\r\n      g.soundAvailable = FALSE\r\n    }\r\n  };\r\n  g.stopAllAudio = () => {\r\n    if (g.soundAvailable) {\r\n      try {\r\n        g.flashSoundPlayer.stopAmbientTrack()\r\n      } catch (b) {\r\n        g.soundAvailable = FALSE\r\n      }\r\n      for (let c = 0; c < 5; c++) g.stopSoundChannel(c)\r\n    }\r\n  };\r\n  g.playDotEatingSound = b => {\r\n    if (g.soundAvailable && google.pacManSound) if (g.gameplayMode == 0) if (g.dotEatingNow[b]) g.dotEatingNext[b] = TRUE;\r\n    else {\r\n      if (b == 0) {\r\n        const c = g.dotEatingSoundPart[b] == 1 ? \"eating-dot-1\" : \"eating-dot-2\";\r\n        g.playSound(c, 1 + g.dotEatingChannel[b], TRUE);\r\n        g.dotTimer = window.setInterval(g.repeatDotEatingSoundPacMan, 150)\r\n      } else {\r\n        g.playSound(\"eating-dot-double\", 3 + g.dotEatingChannel[b], TRUE);\r\n        g.dotTimerMs = window.setInterval(g.repeatDotEatingSoundMsPacMan, 150)\r\n      }\r\n      g.dotEatingChannel[b] = (g.dotEatingChannel[b] + 1) % 2;\r\n      g.dotEatingSoundPart[b] =\r\n        3 - g.dotEatingSoundPart[b]\r\n    }\r\n  };\r\n  g.repeatDotEatingSound = b => {\r\n    g.dotEatingNow[b] = FALSE;\r\n    if (g.dotEatingNext[b]) {\r\n      g.dotEatingNext[b] = FALSE;\r\n      g.playDotEatingSound(b)\r\n    }\r\n  };\r\n  g.repeatDotEatingSoundPacMan = () => {\r\n    g.repeatDotEatingSound(0)\r\n  };\r\n  g.repeatDotEatingSoundMsPacMan = () => {\r\n    g.repeatDotEatingSound(1)\r\n  };\r\n  g.playAmbientSound = () => {\r\n    if (g.soundAvailable && google.pacManSound) {\r\n      let b = 0;\r\n      if (g.gameplayMode == 0 || g.gameplayMode == 1) b = g.ghostEyesCount ? \"ambient-eyes\" : g.mainGhostMode == 4 ? \"ambient-fright\" : g.dotsEaten > 241 ? \"ambient-4\" : g.dotsEaten > 207 ? \"ambient-3\" : g.dotsEaten > 138 ? \"ambient-2\" : \"ambient-1\";\r\n      else if (g.gameplayMode == 13) b = \"cutscene\";\r\n      if (b) try {\r\n        g.flashSoundPlayer.playAmbientTrack(b)\r\n      } catch (c) {\r\n        g.soundAvailable = FALSE\r\n      }\r\n    }\r\n  };\r\n  g.initializeTickTimer = () => {\r\n    window.clearInterval(g.tickTimer);\r\n    g.fpsChoice = 2;\r\n    g.fps = C[g.fpsChoice];\r\n    g.tickInterval = 1E3 / g.fps;\r\n    g.tickMultiplier = D / g.fps;\r\n    g.timing = {};\r\n    for (const b in w) {\r\n      const c = !google.pacManSound && (b == 7 || b == 8) ? 1 : w[b];\r\n      g.timing[b] = Math.round(c * D)\r\n    }\r\n    g.lastTime = (new Date).getTime();\r\n    g.lastTimeDelta = 0;\r\n    g.lastTimeSlownessCount = 0;\r\n    g.tickTimer = window.setInterval(g.tick, g.tickInterval)\r\n  };\r\n  g.decreaseFps = () => {\r\n    if (g.fpsChoice < C.length - 1) {\r\n      g.fpsChoice++;\r\n      g.initializeTickTimer();\r\n      if (g.fpsChoice == C.length - 1) g.canDecreaseFps = FALSE\r\n    }\r\n  };\r\n  g.addCss = () => {\r\n    const b = \"#pcm-c {  width: 554px;  border-top: 25px solid black;  padding-bottom: 25px;  height: 136px;  position: relative; outline: 0;  overflow: hidden;  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);}#pcm-c * {  position: absolute;  overflow: hidden;}#pcm-p,#pcm-cc {  left: 45px;  width: 464px;  height: 136px;  z-index: 99;  overflow: hidden;}#pcm-p .pcm-d {  width: 2px;  height: 2px;  margin-left: 3px;  margin-top: 3px;  background: #f8b090;  z-index: 100;}#pcm-p .pcm-e {  width: 8px;  height: 8px;  z-index: 101;}#pcm-sc-1 {  left: 18px;  top: 16px;  width: 8px;  height: 56px;  position: absolute;  overflow: hidden;}#pcm-sc-2 {  left: 18px;  top: 80px;  width: 8px;  height: 56px;  position: absolute;  overflow: hidden;}#pcm-le {  position: absolute;  left: 515px;  top: 74px;  height: 64px;  width: 32px;} #pcm-le div {  position: relative;}#pcm-sc-1-l {    left: -2px;  top: 0;  width: 48px;  height: 8px;}#pcm-sc-2-l {    left: -2px;  top: 64px;  width: 48px;  height: 8px;}#pcm-so {  left: 7px;  top: 116px;  width: 12px;  height: 12px;  border: 8px solid black;  cursor: pointer;}#pcm-li {  position: absolute;  left: 523px;  top: 0;  height: 80px;  width: 16px;}#pcm-li .pcm-lif {  position: relative;  width: 16px;  height: 12px;  margin-bottom: 3px;}#pcm-p.blk .pcm-e {  visibility: hidden;}#pcm-c .pcm-ac {  width: 16px;  height: 16px;  margin-left: -4px;  margin-top: -4px;  z-index: 110;}#pcm-c .pcm-n {  z-index: 111;}#pcm-c #pcm-stck {  z-index: 109;}#pcm-c #pcm-gbug {  width: 32px;}#pcm-c #pcm-bpcm {  width: 32px;  height: 32px;  margin-left: -20px;  margin-top: -20px;}#pcm-f,#pcm-le div {  width: 32px;  height: 16px;  z-index: 105;}#pcm-f {  margin-left: -8px;  margin-top: -4px;}#pcm-do {  width: 19px;  height: 2px;  left: 279px;  top: 46px;  overflow: hidden;  position: absolute;  background: #ffaaa5;}#pcm-re {  width: 48px;  height: 8px;  z-index: 120;  left: 264px;  top: 80px;}#pcm-go {  width: 80px;  height: 8px;  z-index: 120;  left: 248px;  top: 80px;}\";\r\n    g.styleElement =\r\n      document.createElement(\"style\");\r\n    g.styleElement.type = \"text/css\";\r\n    if (g.styleElement.styleSheet) g.styleElement.styleSheet.cssText = b;\r\n    else g.styleElement.appendChild(document.createTextNode(b));\r\n    document.getElementsByTagName(\"head\")[0].appendChild(g.styleElement)\r\n  };\r\n  g.createCanvasElement = () => {\r\n    g.canvasEl = document.createElement(\"div\");\r\n    g.canvasEl.id = \"pcm-c\";\r\n    g.canvasEl.hideFocus = TRUE;\r\n    document.getElementById(\"logo\").appendChild(g.canvasEl);\r\n    g.canvasEl.tabIndex = 0;\r\n    g.canvasEl.focus()\r\n  };\r\n  g.everythingIsReady = () => {\r\n    if (!g.ready) {\r\n      g.ready = TRUE;\r\n      const b = document.getElementById(\"logo-l\");\r\n      google.dom.remove(b);\r\n      //document.getElementById(\"logo\").style.background = \"black\";\r\n      g.addCss();\r\n      g.createCanvasElement();\r\n      g.speedIntervals = [];\r\n      g.oppositeDirections = [];\r\n      g.oppositeDirections[1] = 2;\r\n      g.oppositeDirections[2] = 1;\r\n      g.oppositeDirections[4] = 8;\r\n      g.oppositeDirections[8] = 4;\r\n      g.addEventListeners();\r\n      g.fpsChoice = 0;\r\n      g.canDecreaseFps = TRUE;\r\n      g.initializeTickTimer();\r\n      g.newGame()\r\n    }\r\n  };\r\n  g.checkIfEverythingIsReady = () => {\r\n    if (g.soundReady || g.graphicsReady) g.updateLoadingProgress(0.67);\r\n    if (g.soundReady && g.graphicsReady) {\r\n      g.updateLoadingProgress(1);\r\n      g.everythingIsReady()\r\n    }\r\n  };\r\n  g.preloadImage = b => {\r\n    const c = new Image;\r\n    const d = google.browser.engine.IE;\r\n    if (!d) c.onload = g.imageLoaded;\r\n    c.src = b;\r\n    d && g.imageLoaded()\r\n  };\r\n  g.imageLoaded = () => {\r\n    g.graphicsReady = TRUE;\r\n    g.checkIfEverythingIsReady()\r\n  };\r\n  g.prepareGraphics = () => {\r\n    g.graphicsReady = FALSE;\r\n    g.preloadImage(spriteURL)\r\n  };\r\n  g.trimString = b => b.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, \"\");\r\n  g.g = (b, c) => {\r\n    if (b < c) return -1;\r\n    else if (b > c) return 1;\r\n    return 0\r\n  };\r\n  g.compareVersions = (b, c) => {\r\n    for (var d = 0, f = g.trimString(String(b)).split(\".\"), h = g.trimString(String(c)).split(\".\"), j = Math.max(f.length, h.length), k = 0; d == 0 && k < j; k++) {\r\n      const x = f[k] || \"\";\r\n      const F = h[k] || \"\";\r\n      const G = new RegExp(\"(\\\\d*)(\\\\D*)\", \"g\");\r\n      const H = new RegExp(\"(\\\\d*)(\\\\D*)\", \"g\");\r\n      do {\r\n        const t = G.exec(x) || [\"\", \"\", \"\"];\r\n        const u = H.exec(F) || [\"\", \"\", \"\"];\r\n        if (t[0].length == 0 && u[0].length == 0) break;\r\n        d = t[1].length == 0 ? 0 : parseInt(t[1], 10);\r\n        const I = u[1].length == 0 ? 0 : parseInt(u[1], 10);\r\n        d = g.g(d, I) || g.g(t[2].length == 0, u[2].length == 0) || g.g(t[2], u[2])\r\n      } while (d == 0)\r\n    }\r\n    return d\r\n  };\r\n  g.getFlashVersion = b => {\r\n    b = b.match(/[\\d]+/g);\r\n    b.length = 3;\r\n    return b.join(\".\")\r\n  };\r\n  g.detectFlash = () => {\r\n    let b = FALSE;\r\n    let c = \"\";\r\n    if (navigator.plugins && navigator.plugins.length) {\r\n      var d = navigator.plugins[\"Shockwave Flash\"];\r\n      if (d) {\r\n        b = TRUE;\r\n        if (d.description) c = g.getFlashVersion(d.description)\r\n      }\r\n      if (navigator.plugins[\"Shockwave Flash 2.0\"]) {\r\n        b = TRUE;\r\n        c = \"2.0.0.11\"\r\n      }\r\n    } else if (navigator.mimeTypes && navigator.mimeTypes.length) {\r\n      if (b = (d = navigator.mimeTypes[\"application/x-shockwave-flash\"]) && d.enabledPlugin) {\r\n        c = d.enabledPlugin.description;\r\n        c = g.getFlashVersion(c)\r\n      }\r\n    } else try {\r\n      d = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.7\");\r\n      b = TRUE;\r\n      c = g.getFlashVersion(d.GetVariable(\"$version\"))\r\n    } catch (f) {\r\n      try {\r\n        d = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.6\");\r\n        b = TRUE;\r\n        c = \"6.0.21\"\r\n      } catch (h) {\r\n        try {\r\n          d = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\");\r\n          b = TRUE;\r\n          c = g.getFlashVersion(d.GetVariable(\"$version\"))\r\n        } catch (j) { }\r\n      }\r\n    }\r\n    g.hasFlash = b;\r\n    g.flashVersion = c\r\n  };\r\n  g.isFlashVersion = b => g.compareVersions(g.flashVersion, b) >= 0;\r\n  g.prepareSound = () => {\r\n    g.soundAvailable = FALSE;\r\n    g.soundReady = FALSE;\r\n    g.detectFlash();\r\n    if (!g.hasFlash || !g.isFlashVersion(\"9.0.0.0\")) {\r\n      g.soundReady = TRUE;\r\n      g.checkIfEverythingIsReady()\r\n    } else {\r\n      g.flashIframe = document.createElement(\"iframe\");\r\n      g.flashIframe.name = \"pm-sound\";\r\n      g.flashIframe.style.position = \"absolute\";\r\n      g.flashIframe.style.top = \"-150px\";\r\n      g.flashIframe.style.border = 0;\r\n      g.flashIframe.style.width = \"100px\";\r\n      g.flashIframe.style.height = \"100px\";\r\n      google.dom.append(g.flashIframe);\r\n      g.flashIframeDoc = g.flashIframe.contentDocument;\r\n      if (g.flashIframeDoc == undefined || g.flashIframeDoc == null) g.flashIframeDoc = g.flashIframe.contentWindow.document;\r\n      g.flashIframeDoc.open();\r\n      g.flashIframeDoc.write('<html><head></head><body><object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0\" width=\"0\" height=\"0\" id=\"pacman-sound-player\" type=\"application/x-shockwave-flash\"> <param name=\"movie\" value=\"src/swf/pacman10-hp-sound.swf\"> <param name=\"allowScriptAccess\" value=\"always\"> <object id=\"pacman-sound-player-2\"  type=\"application/x-shockwave-flash\" data=\"src/swf/pacman10-hp-sound.swf\" width=\"0\" height=\"0\"><param name=\"allowScriptAccess\" value=\"always\"> </object></object></body></html>');\r\n      g.flashIframeDoc.close();\r\n      window.setTimeout(g.flashNotReady, 3E3)\r\n    }\r\n  };\r\n  g.flashNotReady = () => {\r\n    if (!g.ready) {\r\n      g.soundAvailable = FALSE;\r\n      g.soundReady = TRUE;\r\n      g.checkIfEverythingIsReady()\r\n    }\r\n  };\r\n  g.flashReady = b => {\r\n    g.flashSoundPlayer = b;\r\n    g.soundAvailable = TRUE;\r\n    g.soundReady = TRUE;\r\n    g.checkIfEverythingIsReady()\r\n  };\r\n  g.flashLoaded = () => {\r\n    if (g.flashIframeDoc) {\r\n      let b = g.flashIframeDoc.getElementById(\"pacman-sound-player\");\r\n      if (b && b.playTrack) {\r\n        g.flashReady(b);\r\n        return\r\n      } else if ((b = g.flashIframeDoc.getElementById(\"pacman-sound-player-2\")) && b.playTrack) {\r\n        g.flashReady(b);\r\n        return\r\n      }\r\n    }\r\n    g.flashNotReady()\r\n  };\r\n  g.destroy = () => {\r\n    if (google.pacman) {\r\n      g.stopAllAudio();\r\n      window.clearInterval(g.tickTimer);\r\n      window.clearInterval(g.dotTimer);\r\n      window.clearInterval(g.dotTimerMs);\r\n      google.dom.remove(g.styleElement);\r\n      google.dom.remove(g.flashIframe);\r\n      google.dom.remove(g.canvasEl);\r\n      google.pacman = undefined\r\n    }\r\n  };\r\n  g.exportFunctionCalls = () => {\r\n    google.pacman = {};\r\n    google.pacman.insertCoin = g.insertCoin;\r\n    google.pacman.startGameplay = g.startGameplay;\r\n    google.pacman.flashLoaded = g.flashLoaded;\r\n    google.pacman.destroy = g.destroy\r\n    google.pacman.keyPressed = g.keyPressed;\r\n    google.pacman.switchToDoubleMode = g.switchToDoubleMode\r\n  };\r\n  g.updateLoadingProgress = b => {\r\n    b = Math.round(b * 200);\r\n    document.getElementById(\"logo-b\").style.width = `${b}px`\r\n  };\r\n  g.init = () => {\r\n    g.ready = FALSE;\r\n    document.getElementById(\"logo\").title = \"\";\r\n    g.updateLoadingProgress(0.33);\r\n    g.exportFunctionCalls();\r\n    g.useCss = navigator.userAgent.includes(\"MSIE 5.\") || navigator.userAgent.includes(\"MSIE 6.\") || navigator.userAgent.includes(\"MSIE 7.\") ? FALSE : TRUE;\r\n    g.prepareGraphics();\r\n    g.prepareSound()\r\n  };\r\n  g.init();\r\n  return g;\r\n})();\r\n\r\n\r\n\r\nconst CONTROL_CODES = {\r\n  1: {\r\n      up: 38,\r\n      down: 40,\r\n      left: 37,\r\n      right: 39\r\n  },\r\n  2: {\r\n      up: 87,\r\n      down: 83,\r\n      left: 65,\r\n      right: 68\r\n  }\r\n}\r\nclass Pacman{\r\n  constructor(googlePacman){\r\n    this.googlePacman = googlePacman;\r\n  }\r\n  startGameplayNoGhost(){\r\n    GHOST_NUMBER = 0;\r\n    this.googlePacman.switchToDoubleMode();\r\n\r\n  }\r\n  startGameplayWithGhost(){\r\n    GHOST_NUMBER = 2;\r\n    \r\n    this.googlePacman.switchToDoubleMode();\r\n\r\n  }\r\n  move(playerId,direction){    \r\n    this.googlePacman.keyPressed(CONTROL_CODES[playerId][direction]);\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (new Pacman(googlePacman));\n\n//# sourceURL=webpack:///./pacman-server/src/pacman.js?");

/***/ }),

/***/ "./pacman-server/src/pacnmanv2.js":
/*!****************************************!*\
  !*** ./pacman-server/src/pacnmanv2.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*jslint browser: true, undef: true, eqeqeq: true, nomen: true, white: true */\r\n/*global window: false, document: false */\r\n\r\n/*\r\n * fix looped audio\r\n * add fruits + levels\r\n * fix what happens when a ghost is eaten (should go back to base)\r\n * do proper ghost mechanics (blinky/wimpy etc)\r\n */\r\n\r\nvar NONE        = 4,\r\n    UP          = 3,\r\n    LEFT        = 2,\r\n    DOWN        = 1,\r\n    RIGHT       = 11,\r\n    WAITING     = 5,\r\n    PAUSE       = 6,\r\n    PLAYING     = 7,\r\n    COUNTDOWN   = 8,\r\n    EATEN_PAUSE = 9,\r\n    DYING       = 10,\r\n    Pacman      = {};\r\n\r\nPacman.FPS = 30;\r\n\r\nPacman.Ghost = function (game, map, colour) {\r\n\r\n    var position  = null,\r\n        direction = null,\r\n        eatable   = null,\r\n        eaten     = null,\r\n        due       = null;\r\n    \r\n    function getNewCoord(dir, current) { \r\n        \r\n        var speed  = isVunerable() ? 1 : isHidden() ? 4 : 2,\r\n            xSpeed = (dir === LEFT && -speed || dir === RIGHT && speed || 0),\r\n            ySpeed = (dir === DOWN && speed || dir === UP && -speed || 0);\r\n    \r\n        return {\r\n            \"x\": addBounded(current.x, xSpeed),\r\n            \"y\": addBounded(current.y, ySpeed)\r\n        };\r\n    };\r\n\r\n    /* Collision detection(walls) is done when a ghost lands on an\r\n     * exact block, make sure they dont skip over it \r\n     */\r\n    function addBounded(x1, x2) { \r\n        var rem    = x1 % 10, \r\n            result = rem + x2;\r\n        if (rem !== 0 && result > 10) {\r\n            return x1 + (10 - rem);\r\n        } else if(rem > 0 && result < 0) { \r\n            return x1 - rem;\r\n        }\r\n        return x1 + x2;\r\n    };\r\n    \r\n    function isVunerable() { \r\n        return eatable !== null;\r\n    };\r\n    \r\n    function isDangerous() {\r\n        return eaten === null;\r\n    };\r\n\r\n    function isHidden() { \r\n        return eatable === null && eaten !== null;\r\n    };\r\n    \r\n    function getRandomDirection() {\r\n        var moves = (direction === LEFT || direction === RIGHT) \r\n            ? [UP, DOWN] : [LEFT, RIGHT];\r\n        return moves[Math.floor(Math.random() * 2)];\r\n    };\r\n    \r\n    function reset() {\r\n        eaten = null;\r\n        eatable = null;\r\n        position = {\"x\": 90, \"y\": 80};\r\n        direction = getRandomDirection();\r\n        due = getRandomDirection();\r\n    };\r\n    \r\n    function onWholeSquare(x) {\r\n        return x % 10 === 0;\r\n    };\r\n    \r\n    function oppositeDirection(dir) { \r\n        return dir === LEFT && RIGHT ||\r\n            dir === RIGHT && LEFT ||\r\n            dir === UP && DOWN || UP;\r\n    };\r\n\r\n    function makeEatable() {\r\n        direction = oppositeDirection(direction);\r\n        eatable = game.getTick();\r\n    };\r\n\r\n    function eat() { \r\n        eatable = null;\r\n        eaten = game.getTick();\r\n    };\r\n\r\n    function pointToCoord(x) {\r\n        return Math.round(x / 10);\r\n    };\r\n\r\n    function nextSquare(x, dir) {\r\n        var rem = x % 10;\r\n        if (rem === 0) { \r\n            return x; \r\n        } else if (dir === RIGHT || dir === DOWN) { \r\n            return x + (10 - rem);\r\n        } else {\r\n            return x - rem;\r\n        }\r\n    };\r\n\r\n    function onGridSquare(pos) {\r\n        return onWholeSquare(pos.y) && onWholeSquare(pos.x);\r\n    };\r\n\r\n    function secondsAgo(tick) { \r\n        return (game.getTick() - tick) / Pacman.FPS;\r\n    };\r\n\r\n    function getColour() { \r\n        if (eatable) { \r\n            if (secondsAgo(eatable) > 5) { \r\n                return game.getTick() % 20 > 10 ? \"#FFFFFF\" : \"#0000BB\";\r\n            } else { \r\n                return \"#0000BB\";\r\n            }\r\n        } else if(eaten) { \r\n            return \"#222\";\r\n        } \r\n        return colour;\r\n    };\r\n\r\n    function draw(ctx) {\r\n  \r\n        var s    = map.blockSize, \r\n            top  = (position.y/10) * s,\r\n            left = (position.x/10) * s;\r\n    \r\n        if (eatable && secondsAgo(eatable) > 8) {\r\n            eatable = null;\r\n        }\r\n        \r\n        if (eaten && secondsAgo(eaten) > 3) { \r\n            eaten = null;\r\n        }\r\n        \r\n        var tl = left + s;\r\n        var base = top + s - 3;\r\n        var inc = s / 10;\r\n\r\n        var high = game.getTick() % 10 > 5 ? 3  : -3;\r\n        var low  = game.getTick() % 10 > 5 ? -3 : 3;\r\n\r\n        ctx.fillStyle = getColour();\r\n        ctx.beginPath();\r\n\r\n        ctx.moveTo(left, base);\r\n\r\n        ctx.quadraticCurveTo(left, top, left + (s/2),  top);\r\n        ctx.quadraticCurveTo(left + s, top, left+s,  base);\r\n        \r\n        // Wavy things at the bottom\r\n        ctx.quadraticCurveTo(tl-(inc*1), base+high, tl - (inc * 2),  base);\r\n        ctx.quadraticCurveTo(tl-(inc*3), base+low, tl - (inc * 4),  base);\r\n        ctx.quadraticCurveTo(tl-(inc*5), base+high, tl - (inc * 6),  base);\r\n        ctx.quadraticCurveTo(tl-(inc*7), base+low, tl - (inc * 8),  base); \r\n        ctx.quadraticCurveTo(tl-(inc*9), base+high, tl - (inc * 10), base); \r\n\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"#FFF\";\r\n        ctx.arc(left + 6,top + 6, s / 6, 0, 300, false);\r\n        ctx.arc((left + s) - 6,top + 6, s / 6, 0, 300, false);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        var f = s / 12;\r\n        var off = {};\r\n        off[RIGHT] = [f, 0];\r\n        off[LEFT]  = [-f, 0];\r\n        off[UP]    = [0, -f];\r\n        off[DOWN]  = [0, f];\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.arc(left+6+off[direction][0], top+6+off[direction][1], \r\n                s / 15, 0, 300, false);\r\n        ctx.arc((left+s)-6+off[direction][0], top+6+off[direction][1], \r\n                s / 15, 0, 300, false);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n    };\r\n\r\n    function pane(pos) {\r\n\r\n        if (pos.y === 100 && pos.x >= 190 && direction === RIGHT) {\r\n            return {\"y\": 100, \"x\": -10};\r\n        }\r\n        \r\n        if (pos.y === 100 && pos.x <= -10 && direction === LEFT) {\r\n            return position = {\"y\": 100, \"x\": 190};\r\n        }\r\n\r\n        return false;\r\n    };\r\n    \r\n    function move(ctx) {\r\n        \r\n        var oldPos = position,\r\n            onGrid = onGridSquare(position),\r\n            npos   = null;\r\n        \r\n        if (due !== direction) {\r\n            \r\n            npos = getNewCoord(due, position);\r\n            \r\n            if (onGrid &&\r\n                map.isFloorSpace({\r\n                    \"y\":pointToCoord(nextSquare(npos.y, due)),\r\n                    \"x\":pointToCoord(nextSquare(npos.x, due))})) {\r\n                direction = due;\r\n            } else {\r\n                npos = null;\r\n            }\r\n        }\r\n        \r\n        if (npos === null) {\r\n            npos = getNewCoord(direction, position);\r\n        }\r\n        \r\n        if (onGrid &&\r\n            map.isWallSpace({\r\n                \"y\" : pointToCoord(nextSquare(npos.y, direction)),\r\n                \"x\" : pointToCoord(nextSquare(npos.x, direction))\r\n            })) {\r\n            \r\n            due = getRandomDirection();            \r\n            return move(ctx);\r\n        }\r\n\r\n        position = npos;        \r\n        \r\n        var tmp = pane(position);\r\n        if (tmp) { \r\n            position = tmp;\r\n        }\r\n        \r\n        due = getRandomDirection();\r\n        \r\n        return {\r\n            \"new\" : position,\r\n            \"old\" : oldPos\r\n        };\r\n    };\r\n    \r\n    return {\r\n        \"eat\"         : eat,\r\n        \"isVunerable\" : isVunerable,\r\n        \"isDangerous\" : isDangerous,\r\n        \"makeEatable\" : makeEatable,\r\n        \"reset\"       : reset,\r\n        \"move\"        : move,\r\n        \"draw\"        : draw\r\n    };\r\n};\r\n\r\nPacman.User = function (game, map) {\r\n    \r\n    var position  = null,\r\n        direction = null,\r\n        eaten     = null,\r\n        due       = null, \r\n        lives     = null,\r\n        score     = 5,\r\n        keyMap    = {};\r\n    \r\n    keyMap[KEY.ARROW_LEFT]  = LEFT;\r\n    keyMap[KEY.ARROW_UP]    = UP;\r\n    keyMap[KEY.ARROW_RIGHT] = RIGHT;\r\n    keyMap[KEY.ARROW_DOWN]  = DOWN;\r\n\r\n    function addScore(nScore) { \r\n        score += nScore;\r\n        if (score >= 10000 && score - nScore < 10000) { \r\n            lives += 1;\r\n        }\r\n    };\r\n\r\n    function theScore() { \r\n        return score;\r\n    };\r\n\r\n    function loseLife() { \r\n        lives -= 1;\r\n    };\r\n\r\n    function getLives() {\r\n        return lives;\r\n    };\r\n\r\n    function initUser() {\r\n        score = 0;\r\n        lives = 3;\r\n        newLevel();\r\n    }\r\n    \r\n    function newLevel() {\r\n        resetPosition();\r\n        eaten = 0;\r\n    };\r\n    \r\n    function resetPosition() {\r\n        position = {\"x\": 90, \"y\": 120};\r\n        direction = LEFT;\r\n        due = LEFT;\r\n    };\r\n    \r\n    function reset() {\r\n        initUser();\r\n        resetPosition();\r\n    };        \r\n    \r\n    function keyDown(direction) {\r\n            due = direction;\r\n            console.log(direction)\r\n           \r\n            return false;\r\n       \r\n\t};\r\n\r\n    function getNewCoord(dir, current) {   \r\n        return {\r\n            \"x\": current.x + (dir === LEFT && -2 || dir === RIGHT && 2 || 0),\r\n            \"y\": current.y + (dir === DOWN && 2 || dir === UP    && -2 || 0)\r\n        };\r\n    };\r\n\r\n    function onWholeSquare(x) {\r\n        return x % 10 === 0;\r\n    };\r\n\r\n    function pointToCoord(x) {\r\n        return Math.round(x/10);\r\n    };\r\n    \r\n    function nextSquare(x, dir) {\r\n        var rem = x % 10;\r\n        if (rem === 0) { \r\n            return x; \r\n        } else if (dir === RIGHT || dir === DOWN) { \r\n            return x + (10 - rem);\r\n        } else {\r\n            return x - rem;\r\n        }\r\n    };\r\n\r\n    function next(pos, dir) {\r\n        return {\r\n            \"y\" : pointToCoord(nextSquare(pos.y, dir)),\r\n            \"x\" : pointToCoord(nextSquare(pos.x, dir)),\r\n        };                               \r\n    };\r\n\r\n    function onGridSquare(pos) {\r\n        return onWholeSquare(pos.y) && onWholeSquare(pos.x);\r\n    };\r\n\r\n    function isOnSamePlane(due, dir) { \r\n        return ((due === LEFT || due === RIGHT) && \r\n                (dir === LEFT || dir === RIGHT)) || \r\n            ((due === UP || due === DOWN) && \r\n             (dir === UP || dir === DOWN));\r\n    };\r\n\r\n    function move() {\r\n        \r\n        var npos        = null, \r\n            nextWhole   = null, \r\n            oldPosition = position,\r\n            block       = null;\r\n        \r\n        if (due !== direction) {\r\n            npos = getNewCoord(due, position);\r\n            \r\n            if (isOnSamePlane(due, direction) || \r\n                (onGridSquare(position) && \r\n                 map.isFloorSpace(next(npos, due)))) {\r\n                direction = due;\r\n            } else {\r\n                npos = null;\r\n            }\r\n        }\r\n\r\n        if (npos === null) {\r\n            npos = getNewCoord(direction, position);\r\n        }\r\n        \r\n        if (onGridSquare(position) && map.isWallSpace(next(npos, direction))) {\r\n            direction = NONE;\r\n        }\r\n\r\n        if (direction === NONE) {\r\n            return {\"new\" : position, \"old\" : position};\r\n        }\r\n        \r\n        if (npos.y === 100 && npos.x >= 190 && direction === RIGHT) {\r\n            npos = {\"y\": 100, \"x\": -10};\r\n        }\r\n        \r\n        if (npos.y === 100 && npos.x <= -12 && direction === LEFT) {\r\n            npos = {\"y\": 100, \"x\": 190};\r\n        }\r\n        \r\n        position = npos;        \r\n        nextWhole = next(position, direction);\r\n        \r\n        block = map.block(nextWhole);        \r\n        \r\n        if ((isMidSquare(position.y) || isMidSquare(position.x)) &&\r\n            block === Pacman.BISCUIT || block === Pacman.PILL) {\r\n            \r\n            map.setBlock(nextWhole, Pacman.EMPTY);           \r\n            addScore((block === Pacman.BISCUIT) ? 10 : 50);\r\n            eaten += 1;\r\n            \r\n            if (eaten === 182) {\r\n                game.completedLevel();\r\n            }\r\n            \r\n            if (block === Pacman.PILL) { \r\n                game.eatenPill();\r\n            }\r\n        }   \r\n                \r\n        return {\r\n            \"new\" : position,\r\n            \"old\" : oldPosition\r\n        };\r\n    };\r\n\r\n    function isMidSquare(x) { \r\n        var rem = x % 10;\r\n        return rem > 3 || rem < 7;\r\n    };\r\n\r\n    function calcAngle(dir, pos) { \r\n        if (dir == RIGHT && (pos.x % 10 < 5)) {\r\n            return {\"start\":0.25, \"end\":1.75, \"direction\": false};\r\n        } else if (dir === DOWN && (pos.y % 10 < 5)) { \r\n            return {\"start\":0.75, \"end\":2.25, \"direction\": false};\r\n        } else if (dir === UP && (pos.y % 10 < 5)) { \r\n            return {\"start\":1.25, \"end\":1.75, \"direction\": true};\r\n        } else if (dir === LEFT && (pos.x % 10 < 5)) {             \r\n            return {\"start\":0.75, \"end\":1.25, \"direction\": true};\r\n        }\r\n        return {\"start\":0, \"end\":2, \"direction\": false};\r\n    };\r\n\r\n    function drawDead(ctx, amount) { \r\n\r\n        var size = map.blockSize, \r\n            half = size / 2;\r\n\r\n        if (amount >= 1) { \r\n            return;\r\n        }\r\n\r\n        ctx.fillStyle = \"#FFFF00\";\r\n        ctx.beginPath();        \r\n        ctx.moveTo(((position.x/10) * size) + half, \r\n                   ((position.y/10) * size) + half);\r\n        \r\n        ctx.arc(((position.x/10) * size) + half, \r\n                ((position.y/10) * size) + half,\r\n                half, 0, Math.PI * 2 * amount, true); \r\n        \r\n        ctx.fill();    \r\n    };\r\n\r\n    function draw(ctx) { \r\n\r\n        var s     = map.blockSize, \r\n            angle = calcAngle(direction, position);\r\n\r\n        ctx.fillStyle = \"#FFFF00\";\r\n\r\n        ctx.beginPath();        \r\n\r\n        ctx.moveTo(((position.x/10) * s) + s / 2,\r\n                   ((position.y/10) * s) + s / 2);\r\n        \r\n        ctx.arc(((position.x/10) * s) + s / 2,\r\n                ((position.y/10) * s) + s / 2,\r\n                s / 2, Math.PI * angle.start, \r\n                Math.PI * angle.end, angle.direction); \r\n        \r\n        ctx.fill();    \r\n    };\r\n    \r\n    initUser();\r\n\r\n    return {\r\n        \"draw\"          : draw,\r\n        \"drawDead\"      : drawDead,\r\n        \"loseLife\"      : loseLife,\r\n        \"getLives\"      : getLives,\r\n        \"score\"         : score,\r\n        \"addScore\"      : addScore,\r\n        \"theScore\"      : theScore,\r\n        \"keyDown\"       : keyDown,\r\n        \"move\"          : move,\r\n        \"newLevel\"      : newLevel,\r\n        \"reset\"         : reset,\r\n        \"resetPosition\" : resetPosition\r\n    };\r\n};\r\n\r\nPacman.Map = function (size) {\r\n    \r\n    var height    = null, \r\n        width     = null, \r\n        blockSize = size,\r\n        pillSize  = 0,\r\n        map       = null;\r\n    \r\n    function withinBounds(y, x) {\r\n        return y >= 0 && y < height && x >= 0 && x < width;\r\n    }\r\n    \r\n    function isWall(pos) {\r\n        return withinBounds(pos.y, pos.x) && map[pos.y][pos.x] === Pacman.WALL;\r\n    }\r\n    \r\n    function isFloorSpace(pos) {\r\n        if (!withinBounds(pos.y, pos.x)) {\r\n            return false;\r\n        }\r\n        var peice = map[pos.y][pos.x];\r\n        return peice === Pacman.EMPTY || \r\n            peice === Pacman.BISCUIT ||\r\n            peice === Pacman.PILL;\r\n    }\r\n    \r\n    function drawWall(ctx) {\r\n\r\n        var i, j, p, line;\r\n        \r\n        ctx.strokeStyle = \"#0000FF\";\r\n        ctx.lineWidth   = 5;\r\n        ctx.lineCap     = \"round\";\r\n        \r\n        for (let i = 0; i < Pacman.WALLS.length; i += 1) {\r\n            line = Pacman.WALLS[i];\r\n            ctx.beginPath();\r\n\r\n            for (j = 0; j < line.length; j += 1) {\r\n\r\n                p = line[j];\r\n                \r\n                if (p.move) {\r\n                    ctx.moveTo(p.move[0] * blockSize, p.move[1] * blockSize);\r\n                } else if (p.line) {\r\n                    ctx.lineTo(p.line[0] * blockSize, p.line[1] * blockSize);\r\n                } else if (p.curve) {\r\n                    ctx.quadraticCurveTo(p.curve[0] * blockSize, \r\n                                         p.curve[1] * blockSize,\r\n                                         p.curve[2] * blockSize, \r\n                                         p.curve[3] * blockSize);   \r\n                }\r\n            }\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    function clone (object) {\r\n        var i, newObj = (object instanceof Array) ? [] : {};\r\n        for (let i in object) {\r\n            if (i === 'clone') {\r\n                continue;\r\n            }\r\n            if (object[i] && typeof object[i] === \"object\") {\r\n                newObj[i] = clone(object[i]);\r\n            } else {\r\n                newObj[i] = object[i];\r\n            }\r\n        }\r\n        return newObj;\r\n    };\r\n    function reset() {       \r\n        map    = clone(Pacman.MAP);\r\n        height = map.length;\r\n        width  = map[0].length;        \r\n    };\r\n\r\n    function block(pos) {\r\n        return map[pos.y][pos.x];\r\n    };\r\n    \r\n    function setBlock(pos, type) {\r\n        map[pos.y][pos.x] = type;\r\n    };\r\n\r\n    function drawPills(ctx) { \r\n\r\n        if (++pillSize > 30) {\r\n            pillSize = 0;\r\n        }\r\n        \r\n        for (let i = 0; i < height; i += 1) {\r\n\t\t    for (let j = 0; j < width; j += 1) {\r\n                if (map[i][j] === Pacman.PILL) {\r\n                    ctx.beginPath();\r\n\r\n                    ctx.fillStyle = \"#000\";\r\n\t\t            ctx.fillRect((j * blockSize), (i * blockSize), \r\n                                 blockSize, blockSize);\r\n\r\n                    ctx.fillStyle = \"#FFF\";\r\n                    ctx.arc((j * blockSize) + blockSize / 2,\r\n                            (i * blockSize) + blockSize / 2,\r\n                            Math.abs(5 - (pillSize/3)), \r\n                            0, \r\n                            Math.PI * 2, false); \r\n                    ctx.fill();\r\n                    ctx.closePath();\r\n                }\r\n\t\t    }\r\n\t    }\r\n    };\r\n    \r\n    function draw(ctx) {\r\n        \r\n        var i, j, size = blockSize;\r\n\r\n        ctx.fillStyle = \"#000\";\r\n\t    ctx.fillRect(0, 0, width * size, height * size);\r\n\r\n        drawWall(ctx);\r\n        \r\n        for (let i = 0; i < height; i += 1) {\r\n\t\t    for (j = 0; j < width; j += 1) {\r\n\t\t\t    drawBlock(i, j, ctx);\r\n\t\t    }\r\n\t    }\r\n    };\r\n    \r\n    function drawBlock(y, x, ctx) {\r\n\r\n        var layout = map[y][x];\r\n\r\n        if (layout === Pacman.PILL) {\r\n            return;\r\n        }\r\n\r\n        ctx.beginPath();\r\n        \r\n        if (layout === Pacman.EMPTY || layout === Pacman.BLOCK || \r\n            layout === Pacman.BISCUIT) {\r\n            \r\n            ctx.fillStyle = \"#000\";\r\n\t\t    ctx.fillRect((x * blockSize), (y * blockSize), \r\n                         blockSize, blockSize);\r\n\r\n            if (layout === Pacman.BISCUIT) {\r\n                ctx.fillStyle = \"#FFF\";\r\n\t\t        ctx.fillRect((x * blockSize) + (blockSize / 2.5), \r\n                             (y * blockSize) + (blockSize / 2.5), \r\n                             blockSize / 6, blockSize / 6);\r\n\t        }\r\n        }\r\n        ctx.closePath();\t \r\n    };\r\n\r\n    reset();\r\n    \r\n    return {\r\n        \"draw\"         : draw,\r\n        \"drawBlock\"    : drawBlock,\r\n        \"drawPills\"    : drawPills,\r\n        \"block\"        : block,\r\n        \"setBlock\"     : setBlock,\r\n        \"reset\"        : reset,\r\n        \"isWallSpace\"  : isWall,\r\n        \"isFloorSpace\" : isFloorSpace,\r\n        \"height\"       : height,\r\n        \"width\"        : width,\r\n        \"blockSize\"    : blockSize\r\n    };\r\n};\r\n\r\nPacman.Audio = function(game) {\r\n    \r\n    var files          = [], \r\n        endEvents      = [],\r\n        progressEvents = [],\r\n        playing        = [];\r\n    \r\n    function load(name, path, cb) { \r\n\r\n        var f = files[name] = document.createElement(\"audio\");\r\n\r\n        progressEvents[name] = function(event) { progress(event, name, cb); };\r\n        \r\n        f.addEventListener(\"canplaythrough\", progressEvents[name], true);\r\n        f.setAttribute(\"preload\", \"true\");\r\n        f.setAttribute(\"autobuffer\", \"true\");\r\n        f.setAttribute(\"src\", path);\r\n        f.pause();        \r\n    };\r\n\r\n    function progress(event, name, callback) { \r\n        if (event.loaded === event.total && typeof callback === \"function\") {\r\n            callback();\r\n            files[name].removeEventListener(\"canplaythrough\", \r\n                                            progressEvents[name], true);\r\n        }\r\n    };\r\n\r\n    function disableSound() {\r\n        for (var i = 0; i < playing.length; i++) {\r\n            files[playing[i]].pause();\r\n            files[playing[i]].currentTime = 0;\r\n        }\r\n        playing = [];\r\n    };\r\n\r\n    function ended(name) { \r\n\r\n        var i, tmp = [], found = false;\r\n\r\n        files[name].removeEventListener(\"ended\", endEvents[name], true);\r\n\r\n        for (let i = 0; i < playing.length; i++) {\r\n            if (!found && playing[i]) { \r\n                found = true;\r\n            } else { \r\n                tmp.push(playing[i]);\r\n            }\r\n        }\r\n        playing = tmp;\r\n    };\r\n\r\n    function play(name) { \r\n        if (!game.soundDisabled()) {\r\n            endEvents[name] = function() { ended(name); };\r\n            playing.push(name);\r\n            files[name].addEventListener(\"ended\", endEvents[name], true);\r\n            files[name].play();\r\n        }\r\n    };\r\n\r\n    function pause() { \r\n        for (var i = 0; i < playing.length; i++) {\r\n            files[playing[i]].pause();\r\n        }\r\n    };\r\n    \r\n    function resume() { \r\n        for (var i = 0; i < playing.length; i++) {\r\n            files[playing[i]].play();\r\n        }        \r\n    };\r\n    \r\n    return {\r\n        \"disableSound\" : disableSound,\r\n        \"load\"         : load,\r\n        \"play\"         : play,\r\n        \"pause\"        : pause,\r\n        \"resume\"       : resume\r\n    };\r\n};\r\n\r\nvar PACMAN = (function () {\r\n\r\n    var state        = WAITING,\r\n        audio        = null,\r\n        ghosts       = [],\r\n        ghostSpecs   = [],\r\n        eatenCount   = 0,\r\n        level        = 0,\r\n        tick         = 0,\r\n        ghostPos, userPos, \r\n        stateChanged = true,\r\n        timerStart   = null,\r\n        lastTime     = 0,\r\n        ctx          = null,\r\n        timer        = null,\r\n        map          = null,\r\n        users         = [],\r\n        stored       = null;\r\n    function setGhost(){\r\n        ghostSpecs   = [\"#00FFDE\", \"#FF0000\", \"#FFB8DE\", \"#FFB847\"]\r\n\r\n    }\r\n\r\n    function getTick() { \r\n        return tick;\r\n    };\r\n\r\n    function drawScore(text, position) {\r\n        ctx.fillStyle = \"#FFFFFF\";\r\n        ctx.font      = \"12px BDCartoonShoutRegular\";\r\n        ctx.fillText(text, \r\n                     (position[\"new\"][\"x\"] / 10) * map.blockSize, \r\n                     ((position[\"new\"][\"y\"] + 5) / 10) * map.blockSize);\r\n    }\r\n    \r\n    function dialog(text) {\r\n        ctx.fillStyle = \"#FFFF00\";\r\n        ctx.font      = \"18px Calibri\";\r\n        var width = ctx.measureText(text).width,\r\n            x     = ((map.width * map.blockSize) - width) / 2;        \r\n        ctx.fillText(text, x, (map.height * 10) + 8);\r\n    }\r\n\r\n    function soundDisabled() {\r\n        return localStorage[\"soundDisabled\"] === \"true\";\r\n    };\r\n    \r\n    function startLevel() {        \r\n        users.resetPosition();\r\n        for (var i = 0; i < ghosts.length; i += 1) { \r\n            ghosts[i].reset();\r\n        }\r\n        audio.play(\"start\");\r\n        timerStart = tick;\r\n        setState(COUNTDOWN);\r\n    }    \r\n\r\n    function startNewGame() {\r\n        setState(WAITING);\r\n        level = 1;\r\n        users.reset();\r\n        map.reset();\r\n        map.draw(ctx);\r\n        startLevel();\r\n    }\r\n\r\n    function keyDown(userIndex,direction) {\r\n  \r\n            return users.keyDown(userIndex,direction);\r\n        \r\n    }    \r\n\r\n    function loseLife() {        \r\n        setState(WAITING);\r\n        users.loseLife();\r\n        if (users.getLives() > 0) {\r\n            startLevel();\r\n        }\r\n    }\r\n\r\n    function setState(nState) { \r\n        state = nState;\r\n        stateChanged = true;\r\n    };\r\n    \r\n    function collided(user, ghost) {\r\n        return (Math.sqrt(Math.pow(ghost.x - user.x, 2) + \r\n                          Math.pow(ghost.y - user.y, 2))) < 10;\r\n    };\r\n\r\n    function drawFooter() {\r\n        \r\n        var topLeft  = (map.height * map.blockSize),\r\n            textBase = topLeft + 17;\r\n        \r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.fillRect(0, topLeft, (map.width * map.blockSize), 30);\r\n        \r\n        ctx.fillStyle = \"#FFFF00\";\r\n\r\n        for (var i = 0, len = users.getLives(); i < len; i++) {\r\n            ctx.fillStyle = \"#FFFF00\";\r\n            ctx.beginPath();\r\n            ctx.moveTo(150 + (25 * i) + map.blockSize / 2,\r\n                       (topLeft+1) + map.blockSize / 2);\r\n            \r\n            ctx.arc(150 + (25 * i) + map.blockSize / 2,\r\n                    (topLeft+1) + map.blockSize / 2,\r\n                    map.blockSize / 2, Math.PI * 0.25, Math.PI * 1.75, false);\r\n            ctx.fill();\r\n        }\r\n\r\n        ctx.fillStyle = !soundDisabled() ? \"#00FF00\" : \"#FF0000\";\r\n        ctx.font = \"bold 16px sans-serif\";\r\n        //ctx.fillText(\"âª\", 10, textBase);\r\n        ctx.fillText(\"s\", 10, textBase);\r\n\r\n        ctx.fillStyle = \"#FFFF00\";\r\n        ctx.font      = \"14px Calibri\";\r\n        ctx.fillText(\"Score: \" + users.theScore(), 30, textBase);\r\n        ctx.fillText(\"Level: \" + level, 260, textBase);\r\n    }\r\n\r\n    function redrawBlock(pos) {\r\n        map.drawBlock(Math.floor(pos.y/10), Math.floor(pos.x/10), ctx);\r\n        map.drawBlock(Math.ceil(pos.y/10), Math.ceil(pos.x/10), ctx);\r\n    }\r\n\r\n    function mainDraw() { \r\n\r\n        var diff, userPos, i, len, nScore;\r\n        \r\n        ghostPos = [];\r\n        userPos=[]\r\n\r\n        for (let i = 0, len = ghosts.length; i < len; i += 1) {\r\n            ghostPos.push(ghosts[i].move(ctx));\r\n        }\r\n        for (let i = 0, len = ghosts.length; i < len; i += 1) {\r\n            redrawBlock(ghostPos[i].old);\r\n        }\r\n        userPos = users.move(ctx);\r\n        userPos.forEach(pos=> redrawBlock(pos.old))\r\n  //TODO\r\n        //redrawBlock(userPos.old);\r\n        \r\n        for (let i = 0, len = ghosts.length; i < len; i += 1) {\r\n            ghosts[i].draw(ctx);\r\n        }    \r\n                 \r\n        users.draw(ctx);\r\n        \r\n        userPos = userPos[\"new\"];\r\n        \r\n        for (let i = 0, len = ghosts.length; i < len; i += 1) {\r\n            if (collided(userPos, ghostPos[i][\"new\"])) {\r\n                if (ghosts[i].isVunerable()) { \r\n                    audio.play(\"eatghost\");\r\n                    ghosts[i].eat();\r\n                    eatenCount += 1;\r\n                    nScore = eatenCount * 50;\r\n                    drawScore(nScore, ghostPos[i]);\r\n                    users.addScore(nScore);                    \r\n                    setState(EATEN_PAUSE);\r\n                    timerStart = tick;\r\n                } else if (ghosts[i].isDangerous()) {\r\n                    audio.play(\"die\");\r\n                    setState(DYING);\r\n                    timerStart = tick;\r\n                }\r\n            }\r\n        }                             \r\n    };\r\n\r\n    function mainLoop() {\r\n\r\n        var diff;\r\n\r\n        if (state !== PAUSE) { \r\n            ++tick;\r\n        }\r\n\r\n        map.drawPills(ctx);\r\n\r\n        if (state === PLAYING) {\r\n            mainDraw();\r\n        } else if (state === WAITING && stateChanged) {            \r\n            stateChanged = false;\r\n            map.draw(ctx);\r\n            dialog(\"Press N to start a New game\");            \r\n        } else if (state === EATEN_PAUSE && \r\n                   (tick - timerStart) > (Pacman.FPS / 3)) {\r\n            map.draw(ctx);\r\n            setState(PLAYING);\r\n        } else if (state === DYING) {\r\n            if (tick - timerStart > (Pacman.FPS * 2)) { \r\n                loseLife();\r\n            } else { \r\n                redrawBlock(userPos);\r\n                for (let i = 0, len = ghosts.length; i < len; i += 1) {\r\n                    redrawBlock(ghostPos[i].old);\r\n                    ghostPos.push(ghosts[i].draw(ctx));\r\n                }                                   \r\n                users.drawDead(ctx, (tick - timerStart) / (Pacman.FPS * 2));\r\n            }\r\n        } else if (state === COUNTDOWN) {\r\n            \r\n            diff = 5 + Math.floor((timerStart - tick) / Pacman.FPS);\r\n            \r\n            if (diff === 0) {\r\n                map.draw(ctx);\r\n                setState(PLAYING);\r\n            } else {\r\n                if (diff !== lastTime) { \r\n                    lastTime = diff;\r\n                    map.draw(ctx);\r\n                    dialog(\"Starting in: \" + diff);\r\n                }\r\n            }\r\n        } \r\n\r\n        drawFooter();\r\n    }\r\n\r\n    function eatenPill() {\r\n        audio.play(\"eatpill\");\r\n        timerStart = tick;\r\n        eatenCount = 0;\r\n        for (let i = 0; i < ghosts.length; i += 1) {\r\n            ghosts[i].makeEatable(ctx);\r\n        }        \r\n    };\r\n    \r\n    function completedLevel() {\r\n        setState(WAITING);\r\n        level += 1;\r\n        map.reset();\r\n        users.newLevel();\r\n        startLevel();\r\n    };\r\n\r\n    function keyPress(e) { \r\n        if (state !== WAITING && state !== PAUSE) { \r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n    };\r\n    \r\n    function init(wrapper, root) {\r\n        \r\n        var i, len, ghost,\r\n            blockSize = wrapper.offsetWidth / 19,\r\n            canvas    = document.createElement(\"canvas\");\r\n        \r\n        canvas.setAttribute(\"width\", (blockSize * 19) + \"px\");\r\n        canvas.setAttribute(\"height\", (blockSize * 22) + 30 + \"px\");\r\n\r\n        wrapper.appendChild(canvas);\r\n\r\n        ctx  = canvas.getContext('2d');\r\n\r\n        audio = new Pacman.Audio({\"soundDisabled\":soundDisabled});\r\n        map   = new Pacman.Map(blockSize);\r\n        let user1  = new Pacman.User({ \r\n            \"completedLevel\" : completedLevel, \r\n            \"eatenPill\"      : eatenPill \r\n        }, map);\r\n        let user2 =  new Pacman.User({ \r\n            \"completedLevel\" : completedLevel, \r\n            \"eatenPill\"      : eatenPill \r\n        }, map);\r\n        users = new PacmanUsers();\r\n        users.addUser(user1)\r\n        users.addUser(user2)\r\n\r\n        for (let i = 0, len = ghostSpecs.length; i < len; i += 1) {\r\n            ghost = new Pacman.Ghost({\"getTick\":getTick}, map, ghostSpecs[i]);\r\n            ghosts.push(ghost);\r\n        }\r\n        \r\n        map.draw(ctx);\r\n        dialog(\"Loading ...\");\r\n\r\n        var extension = Modernizr.audio.ogg ? 'ogg' : 'mp3';\r\n\r\n        var audio_files = [\r\n            [\"start\", root + \"audio/opening_song.\" + extension],\r\n            [\"die\", root + \"audio/die.\" + extension],\r\n            [\"eatghost\", root + \"audio/eatghost.\" + extension],\r\n            [\"eatpill\", root + \"audio/eatpill.\" + extension],\r\n            [\"eating\", root + \"audio/eating.short.\" + extension],\r\n            [\"eating2\", root + \"audio/eating.short.\" + extension]\r\n        ];\r\n\r\n        load(audio_files, function() { loaded(); });\r\n    };\r\n\r\n    function load(arr, callback) { \r\n        \r\n        if (arr.length === 0) { \r\n            callback();\r\n        } else { \r\n            var x = arr.pop();\r\n            audio.load(x[0], x[1], function() { load(arr, callback); });\r\n        }\r\n    };\r\n        \r\n    function loaded() {\r\n\r\n        dialog(\"Press N to Start\");\r\n        \r\n        document.addEventListener(\"keydown\", keyDown, true);\r\n        document.addEventListener(\"keypress\", keyPress, true); \r\n        \r\n        timer = window.setInterval(mainLoop, 1000 / Pacman.FPS);\r\n    };\r\n    \r\n    return {\r\n        \"init\" : init,\r\n        \"move\": keyDown,\r\n        \"startNewGame\":startNewGame\r\n    };\r\n    \r\n}());\r\n\r\nclass PacmanUsers{\r\n    constructor(){\r\n        this.users = []\r\n    }\r\n\r\n   \r\n    addUser(user){\r\n        this.users.push(user);\r\n    }\r\n    newLevel(){\r\n        this.users.forEach(element =>element.newLevel());\r\n    }\r\n    keyDown(userIndex,direction){\r\n        this.users[userIndex].keyDown(direction)\r\n      \r\n    }\r\n    reset(){\r\n        this.users.forEach(element =>element.reset());\r\n\r\n    }\r\n    getLives(){\r\n        return 3;\r\n    }\r\n    theScore(){\r\n        return 3;\r\n    }\r\n    resetPosition(){\r\n        this.users.forEach(element =>element.resetPosition());\r\n\r\n    }\r\n    move(){\r\n        return this.users.map(element =>element.move());\r\n\r\n    }\r\n    draw(ctx){\r\n        this.users.forEach(element =>element.draw(ctx));\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n/* Human readable keyCode index */\r\nvar KEY = {'BACKSPACE': 8, 'TAB': 9, 'NUM_PAD_CLEAR': 12, 'ENTER': 13, 'SHIFT': 16, 'CTRL': 17, 'ALT': 18, 'PAUSE': 19, 'CAPS_LOCK': 20, 'ESCAPE': 27, 'SPACEBAR': 32, 'PAGE_UP': 33, 'PAGE_DOWN': 34, 'END': 35, 'HOME': 36, 'ARROW_LEFT': 37, 'ARROW_UP': 38, 'ARROW_RIGHT': 39, 'ARROW_DOWN': 40, 'PRINT_SCREEN': 44, 'INSERT': 45, 'DELETE': 46, 'SEMICOLON': 59, 'WINDOWS_LEFT': 91, 'WINDOWS_RIGHT': 92, 'SELECT': 93, 'NUM_PAD_ASTERISK': 106, 'NUM_PAD_PLUS_SIGN': 107, 'NUM_PAD_HYPHEN-MINUS': 109, 'NUM_PAD_FULL_STOP': 110, 'NUM_PAD_SOLIDUS': 111, 'NUM_LOCK': 144, 'SCROLL_LOCK': 145, 'SEMICOLON': 186, 'EQUALS_SIGN': 187, 'COMMA': 188, 'HYPHEN-MINUS': 189, 'FULL_STOP': 190, 'SOLIDUS': 191, 'GRAVE_ACCENT': 192, 'LEFT_SQUARE_BRACKET': 219, 'REVERSE_SOLIDUS': 220, 'RIGHT_SQUARE_BRACKET': 221, 'APOSTROPHE': 222};\r\n\r\n(function () {\r\n\t/* 0 - 9 */\r\n\tfor (var i = 48; i <= 57; i++) {\r\n        KEY['' + (i - 48)] = i;\r\n\t}\r\n\t/* A - Z */\r\n\tfor (let i = 65; i <= 90; i++) {\r\n        KEY['' + String.fromCharCode(i)] = i;\r\n\t}\r\n\t/* NUM_PAD_0 - NUM_PAD_9 */\r\n\tfor (let i = 96; i <= 105; i++) {\r\n        KEY['NUM_PAD_' + (i - 96)] = i;\r\n\t}\r\n\t/* F1 - F12 */\r\n\tfor (let i = 112; i <= 123; i++) {\r\n        KEY['F' + (i - 112 + 1)] = i;\r\n\t}\r\n})();\r\n\r\nPacman.WALL    = 0;\r\nPacman.BISCUIT = 1;\r\nPacman.EMPTY   = 2;\r\nPacman.BLOCK   = 3;\r\nPacman.PILL    = 4;\r\n\r\nPacman.MAP = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n\t[0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n\t[0, 4, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 4, 0],\r\n\t[0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0],\r\n\t[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n\t[0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0],\r\n\t[0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],\r\n\t[0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\r\n\t[2, 2, 2, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 2],\r\n\t[0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n\t[2, 2, 2, 2, 1, 1, 1, 0, 3, 3, 3, 0, 1, 1, 1, 2, 2, 2, 2],\r\n\t[0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n\t[2, 2, 2, 0, 1, 0, 1, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 2, 2],\r\n\t[0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n\t[0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n\t[0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0],\r\n\t[0, 4, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 4, 0],\r\n\t[0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0],\r\n\t[0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],\r\n\t[0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],\r\n\t[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n];\r\n\r\nPacman.WALLS = [\r\n    \r\n    [{\"move\": [0, 9.5]}, {\"line\": [3, 9.5]},\r\n     {\"curve\": [3.5, 9.5, 3.5, 9]}, {\"line\": [3.5, 8]},\r\n     {\"curve\": [3.5, 7.5, 3, 7.5]}, {\"line\": [1, 7.5]},\r\n     {\"curve\": [0.5, 7.5, 0.5, 7]}, {\"line\": [0.5, 1]},\r\n     {\"curve\": [0.5, 0.5, 1, 0.5]}, {\"line\": [9, 0.5]},\r\n     {\"curve\": [9.5, 0.5, 9.5, 1]}, {\"line\": [9.5, 3.5]}],\r\n\r\n    [{\"move\": [9.5, 1]},\r\n     {\"curve\": [9.5, 0.5, 10, 0.5]}, {\"line\": [18, 0.5]},\r\n     {\"curve\": [18.5, 0.5, 18.5, 1]}, {\"line\": [18.5, 7]},\r\n     {\"curve\": [18.5, 7.5, 18, 7.5]}, {\"line\": [16, 7.5]},\r\n     {\"curve\": [15.5, 7.5, 15.5, 8]}, {\"line\": [15.5, 9]},\r\n     {\"curve\": [15.5, 9.5, 16, 9.5]}, {\"line\": [19, 9.5]}],\r\n\r\n    [{\"move\": [2.5, 5.5]}, {\"line\": [3.5, 5.5]}],\r\n\r\n    [{\"move\": [3, 2.5]},\r\n     {\"curve\": [3.5, 2.5, 3.5, 3]},\r\n     {\"curve\": [3.5, 3.5, 3, 3.5]},\r\n     {\"curve\": [2.5, 3.5, 2.5, 3]},\r\n     {\"curve\": [2.5, 2.5, 3, 2.5]}],\r\n\r\n    [{\"move\": [15.5, 5.5]}, {\"line\": [16.5, 5.5]}],\r\n\r\n    [{\"move\": [16, 2.5]}, {\"curve\": [16.5, 2.5, 16.5, 3]},\r\n     {\"curve\": [16.5, 3.5, 16, 3.5]}, {\"curve\": [15.5, 3.5, 15.5, 3]},\r\n     {\"curve\": [15.5, 2.5, 16, 2.5]}],\r\n\r\n    [{\"move\": [6, 2.5]}, {\"line\": [7, 2.5]}, {\"curve\": [7.5, 2.5, 7.5, 3]},\r\n     {\"curve\": [7.5, 3.5, 7, 3.5]}, {\"line\": [6, 3.5]},\r\n     {\"curve\": [5.5, 3.5, 5.5, 3]}, {\"curve\": [5.5, 2.5, 6, 2.5]}],\r\n\r\n    [{\"move\": [12, 2.5]}, {\"line\": [13, 2.5]}, {\"curve\": [13.5, 2.5, 13.5, 3]},\r\n     {\"curve\": [13.5, 3.5, 13, 3.5]}, {\"line\": [12, 3.5]},\r\n     {\"curve\": [11.5, 3.5, 11.5, 3]}, {\"curve\": [11.5, 2.5, 12, 2.5]}],\r\n\r\n    [{\"move\": [7.5, 5.5]}, {\"line\": [9, 5.5]}, {\"curve\": [9.5, 5.5, 9.5, 6]},\r\n     {\"line\": [9.5, 7.5]}],\r\n    [{\"move\": [9.5, 6]}, {\"curve\": [9.5, 5.5, 10.5, 5.5]},\r\n     {\"line\": [11.5, 5.5]}],\r\n\r\n\r\n    [{\"move\": [5.5, 5.5]}, {\"line\": [5.5, 7]}, {\"curve\": [5.5, 7.5, 6, 7.5]},\r\n     {\"line\": [7.5, 7.5]}],\r\n    [{\"move\": [6, 7.5]}, {\"curve\": [5.5, 7.5, 5.5, 8]}, {\"line\": [5.5, 9.5]}],\r\n\r\n    [{\"move\": [13.5, 5.5]}, {\"line\": [13.5, 7]},\r\n     {\"curve\": [13.5, 7.5, 13, 7.5]}, {\"line\": [11.5, 7.5]}],\r\n    [{\"move\": [13, 7.5]}, {\"curve\": [13.5, 7.5, 13.5, 8]},\r\n     {\"line\": [13.5, 9.5]}],\r\n\r\n    [{\"move\": [0, 11.5]}, {\"line\": [3, 11.5]}, {\"curve\": [3.5, 11.5, 3.5, 12]},\r\n     {\"line\": [3.5, 13]}, {\"curve\": [3.5, 13.5, 3, 13.5]}, {\"line\": [1, 13.5]},\r\n     {\"curve\": [0.5, 13.5, 0.5, 14]}, {\"line\": [0.5, 17]},\r\n     {\"curve\": [0.5, 17.5, 1, 17.5]}, {\"line\": [1.5, 17.5]}],\r\n    [{\"move\": [1, 17.5]}, {\"curve\": [0.5, 17.5, 0.5, 18]}, {\"line\": [0.5, 21]},\r\n     {\"curve\": [0.5, 21.5, 1, 21.5]}, {\"line\": [18, 21.5]},\r\n     {\"curve\": [18.5, 21.5, 18.5, 21]}, {\"line\": [18.5, 18]},\r\n     {\"curve\": [18.5, 17.5, 18, 17.5]}, {\"line\": [17.5, 17.5]}],\r\n    [{\"move\": [18, 17.5]}, {\"curve\": [18.5, 17.5, 18.5, 17]},\r\n     {\"line\": [18.5, 14]}, {\"curve\": [18.5, 13.5, 18, 13.5]},\r\n     {\"line\": [16, 13.5]}, {\"curve\": [15.5, 13.5, 15.5, 13]},\r\n     {\"line\": [15.5, 12]}, {\"curve\": [15.5, 11.5, 16, 11.5]},\r\n     {\"line\": [19, 11.5]}],\r\n\r\n    [{\"move\": [5.5, 11.5]}, {\"line\": [5.5, 13.5]}],\r\n    [{\"move\": [13.5, 11.5]}, {\"line\": [13.5, 13.5]}],\r\n\r\n    [{\"move\": [2.5, 15.5]}, {\"line\": [3, 15.5]},\r\n     {\"curve\": [3.5, 15.5, 3.5, 16]}, {\"line\": [3.5, 17.5]}],\r\n    [{\"move\": [16.5, 15.5]}, {\"line\": [16, 15.5]},\r\n     {\"curve\": [15.5, 15.5, 15.5, 16]}, {\"line\": [15.5, 17.5]}],\r\n\r\n    [{\"move\": [5.5, 15.5]}, {\"line\": [7.5, 15.5]}],\r\n    [{\"move\": [11.5, 15.5]}, {\"line\": [13.5, 15.5]}],\r\n    \r\n    [{\"move\": [2.5, 19.5]}, {\"line\": [5, 19.5]},\r\n     {\"curve\": [5.5, 19.5, 5.5, 19]}, {\"line\": [5.5, 17.5]}],\r\n    [{\"move\": [5.5, 19]}, {\"curve\": [5.5, 19.5, 6, 19.5]},\r\n     {\"line\": [7.5, 19.5]}],\r\n\r\n    [{\"move\": [11.5, 19.5]}, {\"line\": [13, 19.5]},\r\n     {\"curve\": [13.5, 19.5, 13.5, 19]}, {\"line\": [13.5, 17.5]}],\r\n    [{\"move\": [13.5, 19]}, {\"curve\": [13.5, 19.5, 14, 19.5]},\r\n     {\"line\": [16.5, 19.5]}],\r\n\r\n    [{\"move\": [7.5, 13.5]}, {\"line\": [9, 13.5]},\r\n     {\"curve\": [9.5, 13.5, 9.5, 14]}, {\"line\": [9.5, 15.5]}],\r\n    [{\"move\": [9.5, 14]}, {\"curve\": [9.5, 13.5, 10, 13.5]},\r\n     {\"line\": [11.5, 13.5]}],\r\n\r\n    [{\"move\": [7.5, 17.5]}, {\"line\": [9, 17.5]},\r\n     {\"curve\": [9.5, 17.5, 9.5, 18]}, {\"line\": [9.5, 19.5]}],\r\n    [{\"move\": [9.5, 18]}, {\"curve\": [9.5, 17.5, 10, 17.5]},\r\n     {\"line\": [11.5, 17.5]}],\r\n\r\n    [{\"move\": [8.5, 9.5]}, {\"line\": [8, 9.5]}, {\"curve\": [7.5, 9.5, 7.5, 10]},\r\n     {\"line\": [7.5, 11]}, {\"curve\": [7.5, 11.5, 8, 11.5]},\r\n     {\"line\": [11, 11.5]}, {\"curve\": [11.5, 11.5, 11.5, 11]},\r\n     {\"line\": [11.5, 10]}, {\"curve\": [11.5, 9.5, 11, 9.5]},\r\n     {\"line\": [10.5, 9.5]}]\r\n];\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst CONTROL_CODES = {\r\n \r\n   \r\n        up: UP,\r\n        down: DOWN,\r\n        left: LEFT,\r\n        right: RIGHT\r\n   \r\n  }\r\nclass PacmanV2{\r\n    constructor(){}\r\n    startGameplayNoGhost(){\r\n        window.setTimeout(()=> { \r\n            var el = document.getElementById(\"pacman\");\r\n            PACMAN.init(el, \"https://raw.githubusercontent.com/daleharvey/pacman/master/\");\r\n            this.startNewGame();\r\n        }, 0);\r\n\r\n  \r\n    }\r\n    startGameplayWithGhost(){\r\n        \r\n        window.setTimeout( ()=> { \r\n            var el = document.getElementById(\"pacman\");\r\n            PACMAN.init(el, \"https://raw.githubusercontent.com/daleharvey/pacman/master/\");\r\n            this.startNewGame();\r\n\r\n        }, 0);\r\n  \r\n    }\r\n    move(playerId,direction){\r\n        PACMAN.move(playerId-1,CONTROL_CODES[direction])\r\n    }\r\n    startNewGame(){\r\n        setTimeout(()=>{\r\n            PACMAN.startNewGame();\r\n        },3000)\r\n\r\n    }\r\n  \r\n  }\r\n  \r\n  /* harmony default export */ __webpack_exports__[\"default\"] = (new PacmanV2());\r\n\n\n//# sourceURL=webpack:///./pacman-server/src/pacnmanv2.js?");

/***/ })

/******/ });